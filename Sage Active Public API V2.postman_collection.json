{
	"info": {
		"_postman_id": "b9665ad2-d605-48ca-a5c1-8ca50efdfdf4",
		"name": "Sage Active Public API V2 (2024 Nov)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25381759"
	},
	"item": [
		{
			"name": "Authenticate and choose your organization",
			"item": [
				{
					"name": "OAuth Authentication - manually fill {{accessToken}}",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "{{scopes}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{authUrl}}?audience={{audience}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "Sage Active Public API",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{clientId}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{accessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{callbackUrl}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "addTokenTo",
									"value": "queryParams",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code_with_pkce",
									"type": "string"
								},
								{
									"key": "state",
									"value": "1234",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Q.organizations sorted by most recent, first record X-OrganizationId, X-TenantId, LegislationCode automatically filled in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Variable creation\", function () {\r",
									"    let jsd = pm.response.json();\r",
									"    if (!jsd || !jsd.data || !jsd.data.organizations || !jsd.data.organizations.edges || jsd.data.organizations.edges.length === 0) {\r",
									"        console.error(\"Unable to save environment variables due to missing data\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Assuming the first organization's details are needed\r",
									"    let firstOrganization = jsd.data.organizations.edges[0].node;\r",
									"   \r",
									"    pm.environment.set(\"X-TenantId\", firstOrganization.tenantId);\r",
									"    console.log(\"'X-TenantId' environment variable has been created: \" + pm.environment.get(\"X-TenantId\"));\r",
									"  \r",
									"    pm.environment.set(\"X-OrganizationId\", firstOrganization.id);\r",
									"    console.log(\"'X-OrganizationId' environment variable has been created: \" + pm.environment.get(\"X-OrganizationId\"));\r",
									"\r",
									"    pm.environment.set(\"legislationCode\", firstOrganization.legislationCode);\r",
									"    console.log(\"'legislationCode' environment variable has been created: \" + pm.environment.get(\"legislationCode\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n    organizations(\r\n        where:{\r\n           status:{eq:READY}\r\n           onboardingCompleted:{eq:true}\r\n        }\r\n        order:{creationDate:DESC}\r\n    ) {\r\n        edges {\r\n            node {\r\n                socialName\r\n                tenantId\r\n                id\r\n                legislationCode\r\n                creationDate\r\n            }\r\n       }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "or Q.organizations find by name,  first record X-OrganizationId, X-TenantId, LegislationCode automatically filled in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Variable creation\", function () {\r",
									"    let jsd = pm.response.json();\r",
									"    if (!jsd || !jsd.data || !jsd.data.organizations || !jsd.data.organizations.edges || jsd.data.organizations.edges.length === 0) {\r",
									"        console.error(\"Unable to save environment variables due to missing data\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Assuming the first organization's details are needed\r",
									"    let firstOrganization = jsd.data.organizations.edges[0].node;\r",
									"   \r",
									"    pm.environment.set(\"X-TenantId\", firstOrganization.tenantId);\r",
									"    console.log(\"'X-TenantId' environment variable has been created: \" + pm.environment.get(\"X-TenantId\"));\r",
									"  \r",
									"    pm.environment.set(\"X-OrganizationId\", firstOrganization.id);\r",
									"    console.log(\"'X-OrganizationId' environment variable has been created: \" + pm.environment.get(\"X-OrganizationId\"));\r",
									"\r",
									"    pm.environment.set(\"legislationCode\", firstOrganization.legislationCode);\r",
									"    console.log(\"'legislationCode' environment variable has been created: \" + pm.environment.get(\"legislationCode\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String!) {\r\n    organizations (\r\n        first:1\r\n        where: {\r\n            socialName: { startsWith: $name }\r\n            status: { eq:READY}\r\n            onboardingCompleted: { eq: true }\r\n        }\r\n        order: { creationDate: DESC }\r\n    ) {\r\n        edges {\r\n            node {\r\n                socialName\r\n                tenantId\r\n                id\r\n                legislationCode\r\n                creationDate\r\n            }\r\n        }\r\n    }\r\n}\r\n",
								"variables": "{\r\n  \"name\":\"bijou\"\r\n}"
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "- First, you will authenticate using an Sage Active user.\n    \n- Then, you will request the list of organizations authorized for this user.\n    \n    - This can be either the list of organizations from the most recent to the oldest\n        \n    - or the list of organizations filtered by the beginning of a name you can specify.\n        \n\nAutomatically, the environment variables **X-OrganizationId**, **X-TenantId**, and **LegislationCode** will be set with the values of the first organization returned.\n\nYou can also choose another organisation from the list and manually set these three variables by copying each of the three values and assigning them to their respective environment variables."
		},
		{
			"name": "Discover FILTERS, SORTING, PAGINATION Query Samples",
			"item": [
				{
					"name": "String, boolean, Enum Filter",
					"item": [
						{
							"name": "eq Q.journalTypes type = PURCHASE or code = different values",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    journalTypes (\r\n        where: { \r\n            or: [\r\n             {type: {eq: PURCHASE_INVOICE}},\r\n             {code: {eq: \"VTE\"}},\r\n             {code: {eq: \"VNTS\"}},\r\n             {code: {eq: \"VKR\"}}\r\n            ]}\r\n    ){\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "eq Q.customers deactivated",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers(\r\n        where: { \r\n            disabled: {eq:true}\r\n        }) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                socialName\r\n                disabled\r\n                disabledDate                 \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }  \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "neq Q.journalTypes type <> PURCHASE and code <> different values",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    journalTypes (\r\n        where: { \r\n            and: [\r\n             {type: {neq: PURCHASE_INVOICE}},\r\n             {code: {neq: \"VTE\"}},\r\n             {code: {neq: \"VNTS\"}},\r\n             {code: {neq: \"VKR\"}},\r\n            ]}\r\n    ){\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "startsWith Q.accountingAccounts filtered by code starts with different values",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { \r\n            or: [\r\n             {code: {startsWith: \"601\"}},\r\n             {code: {startsWith: \"701\"}}\r\n             {code: {startsWith: \"450\"}}\r\n            ]}\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n             }\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "nstartsWith Q.accountingAccounts filtered by code not start  with different values",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { \r\n            and: [\r\n             {code: {nstartsWith: \"601\"}},\r\n             {code: {nstartsWith: \"701\"}},\r\n             {code: {nstartsWith: \"450\"}}\r\n            ]}\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n             }\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "endsWith Q.customers that have contacts with email ends with .fr, .es or .de",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers(\r\n        first:100\r\n        where: { \r\n            contacts: {\r\n                some: { \r\n                    emails :{ \r\n                        some: { \r\n                            or: [\r\n                                { emailAddress: { endsWith: \".fr\" } },\r\n                                { emailAddress: { endsWith: \".es\" } },\r\n                                { emailAddress: { endsWith: \".de\" } }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                socialName\r\n                contacts {\r\n                    name\r\n                    surname\r\n                    emails  {\r\n                        emailAddress\r\n                    }\r\n                }              \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }  \r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "nendsWith Q.customers that have contacts with email not ends with .fr, .es and .de",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers(\r\n        first:100\r\n        order: [{ code: ASC }]\r\n        where: { \r\n            contacts: {\r\n                none: { \r\n                    emails :{ \r\n                        none: { \r\n                              and: [\r\n                                { emailAddress: { nendsWith: \".fr\" } },\r\n                                { emailAddress: { nendsWith: \".es\" } },\r\n                                { emailAddress: { nendsWith: \".de\" } }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                socialName\r\n                contacts {\r\n                    emails  {\r\n                        emailAddress\r\n                    }\r\n                }              \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }  \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contains Q.accountingAccounts filtered by name containing 'immo' or 'inmo'",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { \r\n             or:[\r\n             {name: {contains: \"immo\"}},\r\n             {name: {contains: \"inmo\"}}\r\n             ]}\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n             }\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "ncontains Q.accountingAccounts filtered by name not  containing 'immo' or 'inmo'",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { \r\n             and:[\r\n             {name: {ncontains: \"immo\"}},\r\n             {name: {ncontains: \"inmo\"}}\r\n             ]}\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n             }\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "in Q.journalTypes type 'in' PURCHASE,SALES",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    journalTypes (\r\n        where :{\r\n          type: { in: [PURCHASE_INVOICE, SALES_INVOICE]}\r\n        }\r\n    ){\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "nin Q.journalTypes type not 'in' PURCHASE,SALES",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    journalTypes (\r\n        where :{\r\n          type: { nin: [PURCHASE_INVOICE, SALES_INVOICE]}\r\n        }\r\n    ){\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comparable Filter",
					"item": [
						{
							"name": "eq Q.accountingAccounts 50 first, with Tax Code equal null, sort by code",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { taxTreatmentId: {  eq:null } }\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n                taxTreatmentId\r\n             }\r\n            cursor\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "eq Q.accountingEntries Suppliers date=2024-03-01",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          date: { eq: \"2024-03-01\"}, \r\n          accountingEntryLines : {\r\n         \r\n                some: { \r\n                    accountingEntryThirdParty: { origin: { eq: SUPPLIER } }              \r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number\r\n                description         \r\n                accountingEntryLines {\r\n                    debitAmount\r\n                    accountingEntryThirdParty{\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "neq Q.accountingAccounts 50 first, with Tax Code not equal null, sort by code",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ code: ASC }]\r\n        where: { taxTreatmentId: {  neq:null } }\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n                taxTreatmentId\r\n             }\r\n            cursor\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "in Q.accountingEntries with a debit line equal to 1000 or 500",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          accountingEntryLines : { \r\n                some: { \r\n                  debitAmount: { in: [1000, 500]}\r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                journalTypeId\r\n                date\r\n                number                       \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "nin Q.accountingEntries debit not equal to 1000 and 500",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          accountingEntryLines : { \r\n                all: { \r\n                  debitAmount: { nin: [1000, 500]}\r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number     \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "gt, lt Q.accountingEntries customer debit >1000 & <2000",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          accountingEntryLines : { \r\n                some: { \r\n                    and: [\r\n                        {debitAmount: { gt: 1000}},\r\n                        {debitAmount: { lt: 2000}},\r\n                        {accountingEntryThirdParty: { origin: { eq: CUSTOMER } } }\r\n                    ]                \r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number         \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                    accountingEntryThirdParty{\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "gte, lte Q.accountingEntries customer  debit >=1000 & <=2000",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          accountingEntryLines : { \r\n                some: { \r\n                    and: [\r\n                        {debitAmount: { gte: 1000}},\r\n                        {debitAmount: { lte: 2000}},\r\n                        {accountingEntryThirdParty: { origin: { eq: CUSTOMER } } }\r\n                    ]                \r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number     \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                    accountingEntryThirdParty{\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "gte, lte Q.accountingEntries third date>=2024-03-01 & <=2024-03-31",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where :{\r\n          date: { gte: \"2024-03-01\", lte: \"2024-03-31\" }, \r\n          accountingEntryLines : {\r\n         \r\n                some: { \r\n                    accountingEntryThirdParty: { code: { neq: null } }              \r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number                       \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                    accountingEntryThirdParty{\r\n                        origin\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sorting",
					"item": [
						{
							"name": "Q.accountingAccounts filtered by name containing 'immo' or 'inmo' ordering by Name asc",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order: [{ name: ASC }]\r\n        where: { \r\n            or:[\r\n             {name: {contains: \"immo\"}},\r\n             {name: {contains: \"inmo\"}}\r\n             ]}\r\n        first:50\r\n        ) {\r\n         \r\n        edges {\r\n            node {\r\n                code\r\n                name\r\n             }\r\n        }\r\n         \r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.users filter fullName starts with a, j or b, ordering by fullName asc",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n    users (\r\n        order: [{ fullName: ASC }]\r\n        where: { \r\n            or: [\r\n             {fullName: {startsWith: \"a\"}},\r\n             {fullName: {startsWith: \"j\"}},\r\n             {fullName: {startsWith: \"b\"}}\r\n            ]}\r\n        ) {\r\n        edges {\r\n            node {\r\n               id,\r\n               fullName\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.accountingEntries third date>=2024-03-01 & <=2024-03-31 ordering by Date desc",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        order: {date:DESC}\r\n        where :{\r\n          date: { gte: \"2024-03-01\", lte: \"2024-03-31\" }, \r\n          accountingEntryLines : {\r\n         \r\n                some: { \r\n                    accountingEntryThirdParty: { code: { neq: null } }              \r\n                }\r\n          }\r\n        }\r\n        ){ \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number                       \r\n                accountingEntryLines  {\r\n                    description\r\n                    debitAmount\r\n                    accountingEntryThirdParty{\r\n                        origin\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pagination",
					"item": [
						{
							"name": "Q.accountingAccounts pagination, first 5 {{endCursor / startCursor}} filled in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											" \r",
											"    let jsd = pm.response.json();\r",
											"    pm.environment.set(\"endCursor\", jsd.data.accountingAccounts.pageInfo.endCursor);\r",
											"    console.log(\"'endCursor' environment variable has been created : \" + pm.environment.get(\"endCursor\"));\r",
											"    pm.environment.set(\"startCursor\", jsd.data.accountingAccounts.pageInfo.startCursor);\r",
											"    console.log(\"'startCursor' environment variable has been created : \" + pm.environment.get(\"startCursor\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingAccounts (\r\n        order:{code:ASC}\r\n        first: 5\r\n        ) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                description\r\n            }\r\n            cursor\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n            hasPreviousPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "next 5 (try several \"Send\")",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											" \r",
											"    let jsd = pm.response.json();\r",
											"    pm.environment.set(\"endCursor\", jsd.data.accountingAccounts.pageInfo.endCursor);\r",
											"    console.log(\"'endCursor' environment variable has been created : \" + pm.environment.get(\"endCursor\"));\r",
											"    pm.environment.set(\"startCursor\", jsd.data.accountingAccounts.pageInfo.startCursor);\r",
											"    console.log(\"'startCursor' environment variable has been created : \" + pm.environment.get(\"startCursor\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($endCursor:String!) {\r\n    accountingAccounts (\r\n        order:{code:ASC}\r\n        first: 5\r\n        after: $endCursor\r\n        ) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                description\r\n            }\r\n            cursor\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n            hasPreviousPage\r\n        }\r\n    }     \r\n}",
										"variables": "{\r\n    \"endCursor\":\"{{endCursor}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "previous 5 (try several \"Send\")",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											" \r",
											"    let jsd = pm.response.json();\r",
											"    pm.environment.set(\"endCursor\", jsd.data.accountingAccounts.pageInfo.endCursor);\r",
											"    console.log(\"'endCursor' environment variable has been created : \" + pm.environment.get(\"endCursor\"));\r",
											"    pm.environment.set(\"startCursor\", jsd.data.accountingAccounts.pageInfo.startCursor);\r",
											"    console.log(\"'startCursor' environment variable has been created : \" + pm.environment.get(\"startCursor\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($startCursor:String!) {\r\n    accountingAccounts (\r\n        order:{code:ASC}\r\n        last: 5\r\n        before: $startCursor\r\n        ) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                description\r\n            }\r\n            cursor\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n            hasPreviousPage\r\n        }\r\n    }     \r\n}",
										"variables": "{\r\n    \"startCursor\":\"{{startCursor}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fragment",
					"item": [
						{
							"name": "Q.users using fragment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    users  {\r\n        edges {\r\n            node {\r\n                ...UserProps\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n\r\nfragment UserProps on User {\r\n    id\r\n    fullName\r\n    authenticationEmail\r\n    applicationLanguageCode\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.customers using fragment that have contacts with email ends with .fr or .es",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers(\r\n        first:100\r\n        where: { \r\n            contacts: {\r\n                some: { \r\n                    emails :{ \r\n                        some: { \r\n                            or:[\r\n                            {emailAddress: { endsWith: \".fr\" }},\r\n                            {emailAddress: { endsWith: \".es\" }},\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }) {\r\n        edges {\r\n            node {\r\n                ...customerProp             \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }  \r\n}\r\n\r\nfragment customerProp on Customer{\r\n      id\r\n                code\r\n                socialName\r\n                contacts {\r\n                    name\r\n                    surname\r\n                    emails  {\r\n                        emailAddress\r\n                    }\r\n                }        \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Multi queries",
					"item": [
						{
							"name": "Multi queries to get different values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        last:1\r\n        ) {\r\n        edges {\r\n            node {\r\n               startDate\r\n            }\r\n        }\r\n    },\r\n      journalTypes(\r\n         where: {type: {eq: SALES_INVOICE}}\r\n         first:1) {\r\n        edges {\r\n            node {\r\n               code\r\n               name\r\n               id\r\n            }\r\n        }\r\n    },\r\n       documentTypes (where : { code : { eq : \"01\" }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                name\r\n                legislationCode\r\n            }\r\n        }\r\n    },\r\n        customers (\r\n        where: {\r\n            code: {eq:\"CARAT\"}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n                  defaultAccountingAccountId\r\n            }\r\n        }\r\n        }\r\n}         \r\n\r\n\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Other filter examples",
					"item": [
						{
							"name": "Q.accountingEntries which have third parties",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (where: { accountingEntryLines : {  some: { accountingEntryThirdParty:  { code: { neq: null } } }}}) {\r\n        edges {\r\n            node {    \r\n                journalTypeId        \r\n                date\r\n                number         \r\n                accountingEntryLines  {    \r\n                    description               \r\n                    creditAmount\r\n                    debitAmount\r\n                    accountingEntryThirdParty {\r\n                        code\r\n                        socialName\r\n                        thirdPartyId\r\n                    }\r\n                    accountingEntryInvoice {\r\n                        documentDate\r\n                        externalInvoiceNumber\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.accountingEntries Filter by Invoice number eq 'FCH010111'",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingEntries (\r\n        where: { \r\n            accountingEntryLines : { \r\n                some: { \r\n                    accountingEntryInvoice: { externalInvoiceNumber: { eq: \"FCH010111\" } } \r\n                    }\r\n                }\r\n            }) { \r\n        edges {\r\n            node {\r\n                id\r\n                date\r\n                number         \r\n                accountingEntryLines {\r\n                    description\r\n                    debitAmount\r\n                    creditAmount\r\n                    accountingEntryThirdParty{\r\n                        code\r\n                    }\r\n                     accountingEntryInvoice {\r\n                        externalInvoiceNumber\r\n                     }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.employee that have at least a phone different than mobile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    employees(where: { contacts: { some: { phones: { some: { type: { neq: MOBILE }}}}}}) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                name\r\n                contacts {\r\n                    name\r\n                    surname\r\n                    isDefault\r\n                    phones  {\r\n                        type\r\n                        number\r\n                    }\r\n                }              \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }  \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Discover DATA LOADER Query Samples",
			"item": [
				{
					"name": "Q.AccountingEntry - Journal entries for a journal and a month",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "## Thanks to the new logic of data loaders, it's possible to expose, filter, or sort fields in child subresources or parent subresources.\r\n## Here's a query to retrieve the journal entries for two journals for one month ordered by journal code and then by date.\r\n\r\nquery {\r\n    accountingEntries(\r\n        first:100\r\n        where: {\r\n            and: [\r\n                {\r\n                    or: [\r\n                        {journalType: {code:{eq: \"VTE\"}}},\r\n                        {journalType: {code:{eq: \"ACH\"}}}\r\n                    ]\r\n                },\r\n                {date: {gte: \"2021-01-01\", lte: \"2023-01-31\"}}\r\n            ]\r\n        }\r\n          order: [{ journalType:{code: ASC }}, { date: ASC }]\r\n    ) {\r\n        edges {\r\n            node {\r\n                date\r\n                number \r\n                journalType{\r\n                    code\r\n                    name\r\n                }                       \r\n                accountingEntryLines {\r\n                    subAccount{\r\n                        code\r\n                        name\r\n                    }\r\n                    description\r\n                    debitAmount\r\n                    creditAmount\r\n                    order\r\n                    accountingEntryThirdParty {\r\n                        code\r\n                        socialName\r\n                    }\r\n                    accountingEntryInvoice {                 \r\n                        externalInvoiceNumber \r\n                        openItems{\r\n                            dueDate\r\n                            status\r\n                            paidAmountAccumulated\r\n                        }                 \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.AccountingEntry - Q.Third Party Ledger",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\r\n## Thanks to the new logic of data loaders, it's possible to expose, filter, or sort fields in child subresources or parent subresources.\r\n## Here is a query to retrieve the Third-Party Ledger lines not lettered for a customer for a month.\r\n\r\nquery {\r\n    accountingEntryLines(\r\n        first:100\r\n        where: {\r\n        and: [\r\n           {accountingEntryPayment:{matchingLetter:{eq: null}}}\r\n           {accountingEntryThirdParty:  { code:{eq: \"CARAT\" }}}\r\n           {accountingEntry:{date: {gte: \"2021-01-01\", lte: \"2023-01-31\"}}}\r\n        ]\r\n      }\r\n       order: [{ accountingEntry:{date: ASC }}]\r\n    )\r\n\r\n     {\r\n        edges {\r\n            node {\r\n                accountingEntry{\r\n                    date\r\n                    number\r\n                    journalType{\r\n                        code\r\n                        name\r\n                    }\r\n                }\r\n                accountingEntryPayment{\r\n                    matching\r\n                }\r\n\r\n                description\r\n                debitAmount\r\n                creditAmount\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.AccountingEntry - Q.General Ledger",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\r\n## Thanks to the new logic of data loaders, it's possible to expose, filter, or sort fields in child subresources or parent subresources.\r\n## Here a query to retrieve the General ledger lines for a month\r\n\r\nquery {\r\n    accountingEntryLines(\r\n        first:100\r\n        where: {\r\n        and: [       \r\n           {accountingEntry:{date: {gte: \"2021-01-01\", lte: \"2023-01-31\"}}}\r\n        ]\r\n      }\r\n        order: [\r\n            {subAccount: {code: ASC}},\r\n            {accountingEntry: {date: ASC}}\r\n            {accountingEntry:{journalType:{code: ASC }}}\r\n        ]\r\n    )\r\n\r\n     {\r\n        edges {\r\n            node {\r\n                subAccount{\r\n                    code\r\n                    name\r\n                }\r\n                accountingEntry{\r\n                    date\r\n                    number\r\n                    journalType{\r\n                        code\r\n                        name\r\n                    }\r\n                }\r\n                accountingEntryThirdParty{\r\n                    code\r\n                }\r\n                description\r\n                debitAmount\r\n                creditAmount\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.AccountingEntry - All Pending Customer Open Items by Due Date",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n    accountingEntryLines(\r\n        where: {\r\n          and: [\r\n            {accountingEntry: {date: {gte: \"2024-01-01\", lte: \"2024-12-31\"}}},\r\n            {accountingEntry: {journalType: {type: {eq: SALES_INVOICE}}}},\r\n            {accountingEntryThirdParty: {code: {neq: null}}}\r\n            {accountingEntryInvoice: {openItems: {some: {status: {in: [NOT_SPECIFIED, PARTIAL, ]}}}}}\r\n          ]\r\n        }\r\n        order: [\r\n            {accountingEntry: {journalType: {code: ASC}}}\r\n            {accountingEntry: {date: ASC}},\r\n        ]\r\n    ) {\r\n        edges {\r\n            node {\r\n                accountingEntryThirdParty{\r\n                    code\r\n                    socialName\r\n                }\r\n                accountingEntryInvoice{\r\n                    externalInvoiceNumber\r\n                    openItems{\r\n                        id\r\n                        status\r\n                        amount\r\n                        dueDate\r\n                        paidAmountAccumulated\r\n                        paymentMean{\r\n                            description\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.AccountingEntry - Pending Open Items of a Specific Invoice by Due Date",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAccountingEntryLines($thirdPartyCode: String!, $invoiceNumber: String!) {\r\n    accountingEntryLines(\r\n        where: {\r\n          and: [\r\n            {accountingEntry: {journalType: {type: {eq: SALES_INVOICE}}}},\r\n            {accountingEntryThirdParty: {code: {eq: $thirdPartyCode}}},\r\n            {accountingEntryInvoice: {externalInvoiceNumber: {eq: $invoiceNumber}}},\r\n            {accountingEntryInvoice: {openItems: {some: {status: {in: [NOT_SPECIFIED, PARTIAL]}}}}}\r\n          ]\r\n        }\r\n        order: [\r\n            {accountingEntry: {journalType: {code: ASC}}},\r\n            {accountingEntry: {date: ASC}},\r\n        ]\r\n    ) {\r\n        edges {\r\n            node {\r\n                accountingEntryThirdParty{\r\n                    code\r\n                    socialName\r\n                }\r\n                accountingEntryInvoice{\r\n                    externalInvoiceNumber\r\n                    openItems{\r\n                        id\r\n                        status\r\n                        amount\r\n                        dueDate\r\n                        paidAmountAccumulated\r\n                        paymentMean{\r\n                            description\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}\r\n",
								"variables": "{\r\n  \"thirdPartyCode\": \"CARAT\",\r\n  \"invoiceNumber\": \"FA00050\"\r\n}\r\n"
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.AccountingAccount - Accounts with taxCode \"C0011\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Variables creation\", function () {\r",
									"    let jsd = pm.response.json();\r",
									"\r",
									"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
									"        {console.error(\"Unable to save environment variable\");return;}\r",
									"    pm.environment.set(\"currentId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
									"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n    accountingAccounts (\r\n        order :{code:ASC}\r\n        where :{ \r\n        taxTreatment:{taxCode:{eq:\"C0011\"}}\r\n        }\r\n    ) {\r\n        edges {\r\n            node {\r\n                id\r\n                accountLevel\r\n                accountType\r\n                code\r\n                subAccountType\r\n                description\r\n                taxTreatmentId\r\n                taxTreatment{\r\n                    taxCode\r\n                    description\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.Customer - with Pricing Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Variables creation\", function () {\r",
									"    let jsd = pm.response.json();\r",
									"\r",
									"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
									"        {console.error(\"Unable to save environment variable\");return;}\r",
									"    pm.environment.set(\"currentId\", jsd.data.customers.edges[0].node.id);\r",
									"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  customers (\r\n    order : {code:ASC}\r\n  ) {\r\n    edges {\r\n      node {\r\n        id   \r\n        socialName\r\n        tradeName\r\n        code\r\n        addresses{\r\n            countryIsoCodeAlpha2\r\n        }\r\n        salesDiscountGroup{\r\n            code\r\n            name\r\n        } \r\n        salesTariff{\r\n            code\r\n            name\r\n        }  \r\n        defaultAccountingAccount{\r\n            code\r\n            name\r\n        }\r\n        businessArea{\r\n            name\r\n        }\r\n        documentType{\r\n             code\r\n        }\r\n\r\n      }\r\n    }\r\n  }   \r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesQuote - Opened Quotes of a Customer Over a Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesQuotes (\r\n    order: { documentDate: DESC },\r\n    where: {\r\n      and: [\r\n        { documentDate: { gte: \"2024-01-01\" } },\r\n        { documentDate: { lte: \"2025-04-30\" } },\r\n        { status: { eq: \"Closed\" } },\r\n        { customer: {code:{eq:\"CARAT\"}}}\r\n        ]\r\n    }\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        socialName\r\n        operationalNumber\r\n        creationDate\r\n        customerId\r\n        customer {\r\n          id\r\n          code\r\n          vatNumber\r\n          salesDiscountGroupId\r\n          salesDiscountGroup{\r\n            code\r\n            name\r\n          }\r\n        }\r\n        documentDate\r\n        status\r\n        totalNet\r\n        discount\r\n        lines {\r\n          productCode\r\n          productName\r\n          totalQuantity\r\n          unitPrice\r\n          firstDiscount\r\n          totalNet\r\n          product {\r\n            id\r\n            salesUnitPrice\r\n            salesVatPercentage\r\n          }\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesQuote -  Containing a Specific Product with a Min Qty",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesQuotes (\r\n    order: { documentDate: DESC },\r\n    where: {\r\n      and: [\r\n        { documentDate: { gte: \"2024-01-01\" } },\r\n        { documentDate: { lte: \"2025-04-30\" } },\r\n        { lines: { some: { \r\n          and: [ \r\n            { productCode : {eq :\"CLMENWATCH\"}},\r\n            { unitPrice: {gte : 5}},\r\n          ]\r\n        }}}\r\n      ]\r\n    }\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        socialName\r\n        operationalNumber\r\n        creationDate\r\n        customerId\r\n        customer {\r\n          id\r\n          code\r\n          vatNumber\r\n          salesDiscountGroupId\r\n          salesDiscountGroup{\r\n            code\r\n            name\r\n          }\r\n        }\r\n        documentDate\r\n        status\r\n        totalNet\r\n        discount\r\n        lines {\r\n          productCode\r\n          productName\r\n          totalQuantity\r\n          unitPrice\r\n          firstDiscount\r\n          totalNet\r\n          product {\r\n            id\r\n            salesUnitPrice\r\n            salesVatPercentage\r\n          }\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesQuote - Historical Pricing of a Product in Quotes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesQuoteLines (\r\n    order: { salesQuote: { documentDate: DESC } },\r\n    where: {\r\n      and: [\r\n        { salesQuote: { documentDate: { gte: \"2024-01-01\" } } },\r\n        { salesQuote: { documentDate: { lte: \"2025-04-30\" } } },\r\n        { productCode : { eq: \"GLDRING\" } }\r\n      ]\r\n    }\r\n  ) {\r\n    edges {\r\n      node {\r\n        salesQuote {\r\n          socialName\r\n          vatNumber\r\n          operationalNumber\r\n          creationDate\r\n          customer {\r\n            code\r\n            tradeName\r\n          }\r\n          documentDate\r\n          status\r\n        }\r\n        productCode\r\n        productName\r\n        totalQuantity\r\n        unitPrice\r\n        firstDiscount\r\n        totalNet\r\n        product {\r\n          salesUnitPrice\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesQuote - Top 10 Best-Selling of an Product by Quantity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesQuoteLines (\r\n    order: { totalQuantity: DESC },\r\n    where: {\r\n      and: [\r\n        { salesQuote: { documentDate: { gte: \"2024-01-01\" } } },\r\n        { salesQuote: { documentDate: { lte: \"2025-04-30\" } } }\r\n        { productCode : { eq: \"GLDRING\" } }\r\n      ]\r\n    },\r\n    first: 10\r\n  ) {\r\n    edges {\r\n      node {\r\n        salesQuote {\r\n          socialName\r\n          documentDate\r\n          customer {\r\n            code\r\n            tradeName\r\n          }\r\n          status\r\n        }\r\n        totalQuantity\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesInvoice - Credit Note and the associated original invoice",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesInvoices (\r\n        first: 100\r\n        order: { operationalNumber: DESC }\r\n        where: {\r\n            and: [\r\n                { type: { eq:CREDIT_NOTE}}\r\n            ]\r\n        }\r\n    ) {\r\n        edges {\r\n            node {\r\n                type\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                creationDate\r\n                customerId\r\n                socialName\r\n                documentDate\r\n                sourceSalesInvoice {\r\n                    id\r\n                    operationalNumber\r\n                    documentDate\r\n                    status\r\n                    salesOrderNumber\r\n                }\r\n                status\r\n                totalNet\r\n                discount\r\n                lines {\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q.SalesInvoiceOpenItem - All Pending Customer Open Items by Due Date",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  salesInvoiceOpenItems(\r\n    order: {dueDate:ASC}\r\n    where: {status:{in:[NOT_SPECIFIED,  PARTIAL]}}\r\n  ) {\r\n    edges {\r\n      node {\r\n        salesInvoice {\r\n          documentDate\r\n          operationalNumber\r\n          status\r\n          totalLiquid\r\n          customer {\r\n            id\r\n            code\r\n            socialName\r\n          }\r\n        }\r\n        id\r\n        status\r\n        amount\r\n        dueDate\r\n        paidAmountAccumulated\r\n        paymentMean {\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "🆕 Q.PurchaseInvoice - Invoices with Specific Reduced VAT Rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let legislationCode = pm.environment.get(\"legislationCode\");\r",
									"\r",
									"if (legislationCode === 'FR') {\r",
									"    pm.environment.set(\"reducedVATRate\", 5.5);\r",
									"} else if (legislationCode === 'ES') {\r",
									"    pm.environment.set(\"reducedVATRate\", 10);\r",
									"} else if (legislationCode === 'DE') {\r",
									"    pm.environment.set(\"reducedVATRate\", 7);\r",
									"} else {\r",
									"    console.error(\"Unexpected legislationCode value\");\r",
									"    return;\r",
									"}\r",
									"\r",
									"console.log(\"'reducedVATRate' environment variable has been set to: \" + pm.environment.get(\"reducedVATRate\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($reducedVATRate: Decimal!) {\r\n  purchaseInvoices (\r\n        first:100\r\n        where: {\r\n            vatLines: {\r\n                some: { tax: { percentage: { eq: $reducedVATRate } } }\r\n            }\r\n        }\r\n        order: { invoiceNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                status\r\n                firstDueDate\r\n                operationDate\r\n                id\r\n                invoiceDate\r\n                invoiceNumber\r\n                creationDate\r\n                supplier{\r\n                    socialName\r\n                }\r\n                vatLines{\r\n                    tax{\r\n                        name\r\n                        percentage\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
								"variables": "{\r\n  \"reducedVATRate\": {{reducedVATRate}}\r\n}\r\n"
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "🆕 Q.PurchaseInvoice -  retrieve Unpaid Invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let legislationCode = pm.environment.get(\"legislationCode\");\r",
									"\r",
									"if (legislationCode === 'FR') {\r",
									"    pm.environment.set(\"reducedVATRate\", 5.5);\r",
									"} else if (legislationCode === 'ES') {\r",
									"    pm.environment.set(\"reducedVATRate\", 4);\r",
									"} else if (legislationCode === 'DE') {\r",
									"    pm.environment.set(\"reducedVATRate\", 7);\r",
									"} else {\r",
									"    console.error(\"Unexpected legislationCode value\");\r",
									"    return;\r",
									"}\r",
									"\r",
									"console.log(\"'reducedVATRate' environment variable has been set to: \" + pm.environment.get(\"reducedVATRate\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-TenantId",
								"value": "{{X-TenantId}}"
							},
							{
								"key": "X-OrganizationId",
								"value": "{{X-OrganizationId}}"
							},
							{
								"key": "x-api-key",
								"value": "{{subscriptionKey}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query  {\r\n  purchaseInvoices (\r\n        first:100\r\n        where: {\r\n            status:{ eq: \"Posted\"}\r\n            openItems: {\r\n                some:{ status: {in:[NOT_SPECIFIED, PARTIAL]}}\r\n            }\r\n        }\r\n        order: { invoiceNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                status\r\n                operationDate\r\n                id\r\n                invoiceDate\r\n                invoiceNumber\r\n                supplier{\r\n                    socialName\r\n                }\r\n                openItems{\r\n                    status\r\n                    amount\r\n                    paidAmountAccumulated\r\n                    paymentMean{\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseAddress}}/graphql",
							"host": [
								"{{baseAddress}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Discover MUTATIONS to create, update, delete",
			"item": [
				{
					"name": "M.create a customer, then update it, then delete it",
					"item": [
						{
							"name": "1 - M.createCustomer without code & contact - {{customerId}} filled in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"\r",
											"    let result = jsd.data.createCustomer;\r",
											"    pm.environment.set(\"customerId\", result.id);\r",
											"    console.log(\"'customerId' environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"\r",
											"if (legislationCode === 'FR') {\r",
											"    pm.environment.set(\"identificationNumber\", \"323456789\");\r",
											"    pm.environment.set(\"vatNumber\",\"FR33323456789\");\r",
											"} else if (legislationCode === 'ES') {\r",
											"    pm.environment.set(\"identificationNumber\", \"Z4660201S\");\r",
											"    pm.environment.set(\"vatNumber\",\"ESZ4660201S\");\r",
											"} else if (legislationCode === 'DE') {\r",
											"    pm.environment.set(\"identificationNumber\", \"80715887835\");\r",
											"    pm.environment.set(\"vatNumber\",\"DE807158878\");\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"console.log(\"'identificationNumber' & 'vatNumber' environment variables has been created with value: \" \r",
											"    + pm.environment.get(\"identificationNumber\")+\" - \"+pm.environment.get(\"vatNumber\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values: CustomerCreateGLDtoInput!) {  \r\n  createCustomer (input: $values) {\r\n    id\r\n    code\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"values\":{\r\n    \"documentId\":\"{{identificationNumber}}\",\r\n    \"vatNumber\":\"{{vatNumber}}\",\r\n    \"socialName\": \"Customer Demo\",\r\n    \"tradeName\": \"CustDemo\",\r\n    \"addresses\": [{\r\n      \"firstLine\": \"123 Generic street\",\r\n      \"city\": \"Generic City\",\r\n      \"zipCode\": \"12345\",\r\n      \"countryIsoCodeAlpha2\":\"{{legislationCode}}\"\r\n    }]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - M.createCustomer with code & contact - {{customerId}} filled in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"\r",
											"    let result = jsd.data.createCustomer;\r",
											"    pm.environment.set(\"customerId\", result.id);\r",
											"    console.log(\"'customerId' environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"\r",
											"if (legislationCode === 'FR') {\r",
											"    pm.environment.set(\"identificationNumber\", \"926137613\");\r",
											"    pm.environment.set(\"vatNumber\",\"FR33926137613\");\r",
											"    pm.environment.set(\"code\",\"CUSTDEMO\");\r",
											"} else if (legislationCode === 'ES') {\r",
											"    pm.environment.set(\"identificationNumber\", \"Y0476607S\");\r",
											"    pm.environment.set(\"vatNumber\",\"ESY0476607S\");\r",
											"    pm.environment.set(\"code\",\"CUSTDEMO\");\r",
											"} else if (legislationCode === 'DE') {\r",
											"    pm.environment.set(\"identificationNumber\", \"90881100521\");\r",
											"    pm.environment.set(\"vatNumber\",\"DE908811005\");\r",
											"    pm.environment.set(\"code\",\"10200\");\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"console.log(\"'identificationNumber' & 'vatNumber' environment variables has been created with value: \" \r",
											"    + pm.environment.get(\"identificationNumber\")+\" - \"+pm.environment.get(\"vatNumber\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values: CustomerCreateGLDtoInput!) {  \r\n  createCustomer (input: $values) {\r\n    id\r\n    code\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"values\":{\r\n    \"code\": \"{{code}}\",\r\n    \"documentId\":\"{{identificationNumber}}\",\r\n    \"vatNumber\":\"{{vatNumber}}\",\r\n    \"socialName\": \"Customer Demo\",\r\n    \"tradeName\": \"CustDemo\",\r\n    \"addresses\": [{\r\n      \"firstLine\": \"123 Generic street\",\r\n      \"city\": \"Generic City\",\r\n      \"zipCode\": \"12345\",\r\n      \"countryIsoCodeAlpha2\":\"{{legislationCode}}\"\r\n    }],\r\n    \"contacts\":[{\r\n      \"isDefault\":true,\r\n      \"courtesy\":\"MR\",\r\n      \"name\":\"John\",\r\n      \"surname\":\"Smith\",\r\n      \"phones\":[{\r\n          \"isDefault\":true,\r\n          \"number\":\"01 02 03 04 05\",\r\n          \"type\":\"EMPTY\"\r\n      },\r\n      {\r\n          \"number\":\"06 07 08 09 10\",\r\n          \"type\":\"MOBILE\"\r\n      }],\r\n      \"emails\":[{\r\n          \"emailAddress\":\"smith@customerdemo.com\",\r\n          \"usage\":\"EMPTY\"\r\n      },\r\n      {\r\n          \"emailAddress\":\"info@customerdemo.com\",\r\n          \"usage\":\"PAYMENTS\",\r\n          \"isDefault\":true\r\n      }]\r\n    },\r\n    {\r\n      \"isDefault\":false,\r\n      \"name\":\"Infos\",\r\n      \"socialMedias\":[{\r\n          \"name\":\"site1\",\r\n          \"link\":\"www.customerdemo.com\"\r\n      }]\r\n    }]\r\n  }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "3 - Q.customers filtered by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.customers.edges.length === 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    let cust = jsd.data.customers.edges[0].node;\r",
											"    if (cust.addresses && cust.addresses.length > 0)\r",
											"    {\r",
											"      pm.environment.set(\"custAddressId\", cust.addresses[0].id);\r",
											"      console.log(\"'custAddressId' environment variable has been created : \" + pm.environment.get(\"custAddressId\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query  ($id : UUID!) {\r\n    customers\r\n     (where : { id : { eq : $id }})  {\r\n        edges {\r\n            node {\r\n                    id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts{\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                isDefault\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    type\r\n                    value\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId              \r\n            }\r\n        }\r\n    }   \r\n}\r\n",
										"variables": "{\r\n  \"id\":\"{{customerId}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 - M.updateCustomer {{customerId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values: CustomerUpdateGLDtoInput!) {  \r\n  updateCustomer (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{customerId}}\",\r\n    \"addresses\": [{\r\n      \"id\": \"{{custAddressId}}\",\r\n      \"requestedAction\":\"MODIFY\",\r\n      \"firstLine\": \"Rue tête d'Or MODIFY\"\r\n    }]\r\n }\r\n}\r\n    "
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 - Q.customers filtered by Id  Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query  ($id : UUID!) {\r\n    customers\r\n     (where : { id : { eq : $id }})  {\r\n        edges {\r\n            node {\r\n                    id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts{\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                isDefault\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    type\r\n                    value\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId              \r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n",
										"variables": "{\r\n  \"id\":\"{{customerId}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "6 - M.deletecustomer {{customerId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values:CustomerDeleteGLDtoInput!) {\r\n    deleteCustomer(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{customerId}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"description": "The initial example for creation without a code **assumes that automatic numbering for the Customer resource is not inactive** in Sage Active under _Configuration > Company > Sequence Numbers._"
				},
				{
					"name": "M.create an account, then update it, then delete it",
					"item": [
						{
							"name": "1- Q.taxTreatments;  id filled in {taxTreatmentId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.taxTreatments.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"taxTreatmentId\", jsd.data.taxTreatments.edges[0].node.id);\r",
											"    console.log(\"'taxTreatmentId' environment variable has been created : \" + pm.environment.get(\"taxTreatmentId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    taxTreatments (\r\n        where: { \r\n        or: [\r\n            {taxCode: {eq:\"C0005\"}},\r\n            {taxCode: {eq:\"C001\"}},\r\n        ]}\r\n        ) {\r\n        edges {\r\n            node {\r\n                code,\r\n                taxCode\r\n                id\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "2- M.createAccountingAccount  - new id filled in {{currentId}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"\r",
											"if (legislationCode === 'FR') {\r",
											"    pm.environment.set(\"accountCode\", \"626200001\");\r",
											"} else if (legislationCode === 'ES') {\r",
											"    pm.environment.set(\"accountCode\", \"626200001\");\r",
											"} else if (legislationCode === 'DE') {\r",
											"    pm.environment.set(\"accountCode\", \"3011\");\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"console.log(\"'accountCode' environment variable has been created with value: \" \r",
											"    + pm.environment.get(\"accountCode\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.createAccountingAccount == null)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"currentId\", jsd.data.createAccountingAccount.id);\r",
											"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values: AccountingAccountCreateGLDtoInput!) {  \r\n    createAccountingAccount(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\": {\r\n    \"accountLevel\": \"SUB_ACCOUNT\",\r\n    \"accountType\": \"INCOME_STATEMENT\",\r\n    \"code\": \"{{accountCode}}\",\r\n    \"name\": \"Phone\",\r\n    \"description\": \"\",\r\n    \"subAccountType\": \"CHARGE\",\r\n    \"taxTreatmentId\": \"{{taxTreatmentId}}\"\r\n  }\r\n} "
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "3- M.updateAccountingAccount  {{currentId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values: AccountingAccountUpdateGLDtoInput!) {  \r\n    updateAccountingAccount(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\":{\r\n    \"id\": \"{{currentId}}\",\r\n    \"name\": \"Telephone 222\",\r\n    \"description\": \"\",\r\n    \"subAccountType\": \"CHARGE\",\r\n    \"taxTreatmentId\": \"{{taxTreatmentId}}\"\r\n  }\r\n} "
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "4- M.deleteAccountingAccount  {{currentId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values:AccountingAccountDeleteGLDtoInput!) {\r\n    deleteAccountingAccount(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"description": "Step 1 will allow you to retrieve a tax code to associate with the account to be created."
				},
				{
					"name": "M.create Accounting Entries using codes, then delete it",
					"item": [
						{
							"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"    console.log(jsd.data.accountingExercises.edges[0].node.id);\r",
											"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"dateInFirstExercice\",jsd.data.accountingExercises.edges[0].node.startDate);\r",
											"    console.log(\"'dateInFirstExercice' environment variable has been created : \" + pm.environment.get(\"dateInFirstExercice\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        last:1\r\n        ) {\r\n        edges {\r\n            node {\r\n               startDate\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "2- Q.journalTypes - first type SALES_INVOICE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.journalTypes.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"journalSalesCode\", jsd.data.journalTypes.edges[0].node.code);\r",
											"     console.log(\"'journalSalesCode' environment variable has been created : \" + pm.environment.get(\"journalSalesCode\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n     journalTypes(\r\n         where: {type: {eq: SALES_INVOICE}}\r\n         first:1) {\r\n        edges {\r\n            node {\r\n               code\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "3-Q.customers - first activated with account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"customerCode\", jsd.data.customers.edges[0].node.code);\r",
											"    console.log(\"customerCode environment variable has been created : \" + pm.environment.get(\"customerCode\"));\r",
											"    pm.environment.set(\"defaultAccountingAccountId\", jsd.data.customers.edges[0].node.defaultAccountingAccountId);\r",
											"    console.log(\"defaultAccountingAccountId environment variable has been created : \" + pm.environment.get(\"defaultAccountingAccountId\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  code\r\n                  defaultAccountingAccountId\r\n            }\r\n        }\r\n    }   \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "4- Q.accountingAccounts sales & tax account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"    let edges = jsd.data?.accountingAccounts?.edges;\r",
											"    if (edges == null || edges.length < 2)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"\r",
											"    let salesAccount = pm.environment.get(\"salesAccount\");\r",
											"    let taxAccount = pm.environment.get(\"taxAccount\");\r",
											"\r",
											"    for(let edge of edges) {\r",
											"        let code = edge.node.code;\r",
											"        if(code.startsWith(salesAccount)) {\r",
											"            pm.environment.set(\"salesAccountCode\", code);\r",
											"            console.log(\"'salesAccountCode' environment variable has been created : \" + pm.environment.get(\"salesAccountCode\"));\r",
											"        } else if(code.startsWith(taxAccount)) {\r",
											"            pm.environment.set(\"taxAccountCode\", code);\r",
											"            console.log(\"'taxAccountCode' environment variable has been created : \" + pm.environment.get(\"taxAccountCode\"));\r",
											"        }\r",
											"        else{\r",
											"            pm.environment.set(\"thirdLedgerAccountCode\", code);\r",
											"            console.log(\"'thirdLedgerAccountCode' environment variable has been created : \" + pm.environment.get(\"thirdLedgerAccountCode\"));\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"\r",
											"if (legislationCode === 'FR') {\r",
											"    pm.environment.set(\"salesAccount\", \"70105\");\r",
											"    pm.environment.set(\"taxAccount\", \"445715\");\r",
											"} else if (legislationCode === 'ES') {\r",
											"    pm.environment.set(\"salesAccount\", \"70100\");\r",
											"    pm.environment.set(\"taxAccount\", \"477000\");\r",
											"} else if (legislationCode === 'DE') {\r",
											"    pm.environment.set(\"salesAccount\", \"8300\");\r",
											"    pm.environment.set(\"taxAccount\", \"1771\");\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"console.log(\"'salesAccount' environment variable has been created : \" + pm.environment.get(\"salesAccount\"));\r",
											"console.log(\"'taxAccount' environment variable has been created : \" + pm.environment.get(\"taxAccount\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($salesAccount : String!, $taxAccount : String!, $thirdLedgerAccount: UUID!) {\r\n    accountingAccounts (\r\n        where: { \r\n              or: [\r\n                { code: {startsWith: $salesAccount} },\r\n                { code: {startsWith: $taxAccount} }\r\n                { id: {eq: $thirdLedgerAccount} }\r\n              ],\r\n              deactivated: {eq:false},\r\n              accountLevel: {eq:SUB_ACCOUNT}\r\n        },\r\n    ) {\r\n        edges {\r\n            node {\r\n                code\r\n\r\n            }\r\n        }\r\n    }    \r\n}\r\n",
										"variables": "{\r\n    \"salesAccount\":\"{{salesAccount}}\",\r\n    \"taxAccount\":\"{{taxAccount}}\",\r\n    \"thirdLedgerAccount\":\"{{defaultAccountingAccountId}}\"\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "5- M.CreateAccountingEntry Sales - new id filled in {{currentId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variable creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.createAccountingEntryUsingCodes == null)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    let result = jsd.data.createAccountingEntryUsingCodes;\r",
											"    pm.environment.set(\"currentId\", result.id);\r",
											"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let taxBase = 150;\r",
											"pm.environment.set(\"taxBase\", taxBase);\r",
											"console.log(\"'taxBase' environment variable has been created : \" + pm.environment.get(\"taxBase\"));\r",
											"\r",
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"let subAccountThird;\r",
											"let taxPercentage;\r",
											"if (legislationCode === 'FR') {\r",
											"     taxPercentage=5.5;\r",
											"} else if (legislationCode === 'ES') {\r",
											"     taxPercentage=10;\r",
											"} else if (legislationCode === 'DE') {\r",
											"     taxPercentage=7;\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"let taxAmount = (taxBase * taxPercentage) / 100;\r",
											"pm.environment.set(\"taxAmount\", taxAmount);\r",
											"console.log(\"'taxAmount' environment variable has been created : \" + pm.environment.get(\"taxAmount\"));\r",
											"\r",
											"let amountIncludingTax = taxBase + taxAmount;\r",
											"pm.environment.set(\"amountIncludingTax\", amountIncludingTax);\r",
											"console.log(\"'amountIncludingTax' environment variable has been created : \" + pm.environment.get(\"amountIncludingTax\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateAccountingEntryUsingCodes ($values:AccountingEntryCreateUsingCodesGLDtoInput!) {    \r\n  createAccountingEntryUsingCodes (input: $values) {\r\n    id\r\n    number\r\n  }\r\n}\r\n",
										"variables": "{\r\n    \"values\":{\r\n      \"description\": \"Facture FA0022\",\r\n      \"date\": \"{{dateInFirstExercice}}\",\r\n      \"documentDate\" : \"{{dateInFirstExercice}}\",\r\n      \"documentNumber\" : \"FA0022\",\r\n      \"journalTypeCode\": \"{{journalSalesCode}}\",\r\n      \"accountingEntryLines\": [\r\n        {\r\n          \"thirdCode\":\"{{customerCode}}\",\r\n          \"creditAmount\": 0,\r\n          \"debitAmount\": {{amountIncludingTax}},\r\n          \"subAccountCode\": \"{{thirdLedgerAccountCode}}\"\r\n        },\r\n        {\r\n          \"creditAmount\": {{taxBase}},\r\n          \"debitAmount\": 0,\r\n          \"subAccountCode\": \"{{salesAccountCode}}\"\r\n        },\r\n        {\r\n          \"creditAmount\": {{taxAmount}},\r\n          \"debitAmount\": 0,\r\n          \"subAccountCode\": \"{{taxAccountCode}}\"\r\n        }\r\n      ]\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "6- M.deleteAccountingEntry {{currentId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values:AccountingEntryDeleteGLDtoInput!) {\r\n    deleteAccountingEntry(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"description": "The steps 1 to 5 will allow you to retrieve data necessary for the creation of the accounting entry :\n\n1. a valid date in an open fiscal period,\n    \n2. a journal code,\n    \n3. a customer code, and their general ledger account code\n    \n4. a sales and tax account codes.\n    \n\n**You must execute these steps in the specified order** before requesting the creation of the accounting entry."
				},
				{
					"name": "M.create Accounting Entries using Ids, then delete it",
					"item": [
						{
							"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"    console.log(jsd.data.accountingExercises.edges[0].node.id);\r",
											"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"dateInFirstExercice\",jsd.data.accountingExercises.edges[0].node.startDate);\r",
											"    console.log(\"'dateInFirstExercice' environment variable has been created : \" + pm.environment.get(\"dateInFirstExercice\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        last:1\r\n        ) {\r\n        edges {\r\n            node {\r\n               startDate\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "2- Q.journalTypes - first type SALES_INVOICE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.journalTypes.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"journalSalesId\", jsd.data.journalTypes.edges[0].node.id);\r",
											"    console.log(\"'journalSalesId' environment variable has been created : \" + pm.environment.get(\"journalSalesId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n     journalTypes(\r\n         where: {type: {eq: SALES_INVOICE}}\r\n         first:1) {\r\n        edges {\r\n            node {\r\n               id\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "3-Q.customers - first activated with account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
											"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
											"    pm.environment.set(\"defaultAccountingAccountId\", jsd.data.customers.edges[0].node.defaultAccountingAccountId);\r",
											"    console.log(\"defaultAccountingAccountId environment variable has been created : \" + pm.environment.get(\"defaultAccountingAccountId\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  defaultAccountingAccountId\r\n            }\r\n        }\r\n    }   \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "4- Q.accountingAccounts sales & tax account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"    let edges = jsd.data?.accountingAccounts?.edges;\r",
											"    if (edges == null || edges.length < 2)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"\r",
											"    let salesAccount = pm.environment.get(\"salesAccount\");\r",
											"    let taxAccount = pm.environment.get(\"taxAccount\");\r",
											"\r",
											"    for(let edge of edges) {\r",
											"        let code = edge.node.code;\r",
											"        if(code.startsWith(salesAccount)) {\r",
											"            pm.environment.set(\"salesAccountId\", edge.node.id);\r",
											"            console.log(\"'salesAccountId' environment variable has been created : \" + pm.environment.get(\"salesAccountId\"));\r",
											"        } else if(code.startsWith(taxAccount)) {\r",
											"            pm.environment.set(\"taxAccountId\", edge.node.id);\r",
											"            console.log(\"'taxAccountId' environment variable has been created : \" + pm.environment.get(\"taxAccountId\"));\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"\r",
											"if (legislationCode === 'FR') {\r",
											"    pm.environment.set(\"salesAccount\", \"70105\");\r",
											"    pm.environment.set(\"taxAccount\", \"445715\");\r",
											"} else if (legislationCode === 'ES') {\r",
											"    pm.environment.set(\"salesAccount\", \"70100\");\r",
											"    pm.environment.set(\"taxAccount\", \"477000\");\r",
											"} else if (legislationCode === 'DE') {\r",
											"    pm.environment.set(\"salesAccount\", \"8300\");\r",
											"    pm.environment.set(\"taxAccount\", \"1771\");\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"console.log(\"'salesAccount' environment variable has been created : \" + pm.environment.get(\"salesAccount\"));\r",
											"console.log(\"'taxAccount' environment variable has been created : \" + pm.environment.get(\"taxAccount\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($salesAccount : String!, $taxAccount : String!) {\r\n    accountingAccounts (\r\n        where: { \r\n              or: [\r\n                { code: {startsWith: $salesAccount} },\r\n                { code: {startsWith: $taxAccount} }\r\n              ],\r\n              deactivated: {eq:false},\r\n              accountLevel: {eq:SUB_ACCOUNT}\r\n        },\r\n    ) {\r\n        edges {\r\n            node {\r\n                code\r\n                id\r\n            }\r\n        }\r\n    }    \r\n}\r\n",
										"variables": "{\r\n    \"salesAccount\":\"{{salesAccount}}\",\r\n    \"taxAccount\":\"{{taxAccount}}\"\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "5- M.CreateAccountingEntry Sales - new id filled in {{currentId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variable creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.createAccountingEntryUsingIds == null)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    let result = jsd.data.createAccountingEntryUsingIds;\r",
											"    pm.environment.set(\"currentId\", result.id);\r",
											"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let taxBase = 150;\r",
											"pm.environment.set(\"taxBase\", taxBase);\r",
											"console.log(\"'taxBase' environment variable has been created : \" + pm.environment.get(\"taxBase\"));\r",
											"\r",
											"let legislationCode = pm.environment.get(\"legislationCode\");\r",
											"let taxPercentage;\r",
											"if (legislationCode === 'FR') {\r",
											"     taxPercentage=5.5;\r",
											"} else if (legislationCode === 'ES') {\r",
											"     taxPercentage=10;\r",
											"} else if (legislationCode === 'DE') {\r",
											"     taxPercentage=7;\r",
											"} else {\r",
											"    console.error(\"Unexpected legislationCode value\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"let taxAmount = (taxBase * taxPercentage) / 100;\r",
											"pm.environment.set(\"taxAmount\", taxAmount);\r",
											"console.log(\"'taxAmount' environment variable has been created : \" + pm.environment.get(\"taxAmount\"));\r",
											"\r",
											"let amountIncludingTax = taxBase + taxAmount;\r",
											"pm.environment.set(\"amountIncludingTax\", amountIncludingTax);\r",
											"console.log(\"'amountIncludingTax' environment variable has been created : \" + pm.environment.get(\"amountIncludingTax\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values:AccountingEntryCreateUsingIdsGLDtoInput!) {    \r\n  createAccountingEntryUsingIds (input: $values) {\r\n    id\r\n    number\r\n  }\r\n}\r\n",
										"variables": "{\r\n    \"values\":{\r\n      \"description\": \"Facture FA0022\",\r\n      \"date\": \"{{dateInFirstExercice}}\",\r\n      \"documentDate\" : \"{{dateInFirstExercice}}\",\r\n      \"documentNumber\" : \"FA0022\",\r\n      \"journalTypeId\": \"{{journalSalesId}}\",\r\n      \"accountingEntryLines\": [\r\n        {\r\n          \"thirdId\":\"{{customerId}}\",\r\n          \"creditAmount\": 0,\r\n          \"debitAmount\": {{amountIncludingTax}},\r\n          \"subAccountId\": \"{{defaultAccountingAccountId}}\"\r\n        },\r\n        {\r\n          \"creditAmount\": {{taxBase}},\r\n          \"debitAmount\": 0,\r\n          \"subAccountId\": \"{{salesAccountId}}\"\r\n        },\r\n        {\r\n          \"creditAmount\": {{taxAmount}},\r\n          \"debitAmount\": 0,\r\n          \"subAccountId\": \"{{taxAccountId}}\"\r\n        }\r\n      ]\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "6- M.deleteAccountingEntry {{currentId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($values:AccountingEntryDeleteGLDtoInput!) {\r\n    deleteAccountingEntry(input: $values) {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"description": "The steps 1 to 5 will allow you to retrieve data necessary for the creation of the accounting entry :\n\n1. a valid date in an open fiscal period,\n    \n2. a journal Id,\n    \n3. a customer Id, and their general ledger account Id\n    \n4. a sales and tax account Ids."
				}
			]
		},
		{
			"name": "Reference : common to all organizations",
			"item": [
				{
					"name": "Users and Access",
					"item": [
						{
							"name": "Q.userProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n  userProfile {\r\n    applicationLanguageCode\r\n    authenticationEmail\r\n    fullName\r\n  }\r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.users",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    users {\r\n        edges {\r\n            node {\r\n                id\r\n                fullName\r\n                authenticationEmail\r\n                applicationLanguageCode\r\n            }\r\n        }\r\n    }     \r\n}\r\n\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "⚙️ Q.userAccessPolicyCheck",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($actions: [String!]!) {\r\n  userAccessPolicyCheck (actions: $actions) {\r\n    action\r\n    isAllowed\r\n  }     \r\n}",
										"variables": "{\r\n    \"actions\": [\r\n        \"accountingAccounts\",\r\n        \"accountingEntries\",\r\n        \"accountingEntryLines\",\r\n        \"accountingExercises\",\r\n        \"accountingPlanMasterImport\",\r\n        \"accountingPlansMasterById\",\r\n        \"accountingThirdPartyBalance\",\r\n        \"accountingTrialBalance\",\r\n        \"businessAreas\",\r\n        \"closeSalesInvoice\",\r\n        \"countries\",\r\n        \"createAccountingAccount\",\r\n        \"createAccountingEntry\",\r\n        \"createAccountingEntryUsingCodes\",\r\n        \"createAccountingEntryUsingIds\",\r\n        \"createAccountingExercise\",\r\n        \"createBusinessArea\",\r\n        \"createCustomer\",\r\n        \"createEmployee\",\r\n        \"createJobArea\",\r\n        \"createJournalType\",\r\n        \"createOrganization\",\r\n        \"createPaymentMean\",\r\n        \"createPaymentTerm\",\r\n        \"createProduct\",\r\n        \"createPurchaseInvoice\",\r\n        \"createSalesDeliveryNote\",\r\n        \"createSalesInvoice\",\r\n        \"createSalesOrder\",\r\n        \"createSalesQuote\",\r\n        \"createSupplier\",\r\n        \"customers\",\r\n        \"deleteAccountingAccount\",\r\n        \"deleteAccountingEntry\",\r\n        \"deleteBusinessArea\",\r\n        \"deleteCustomer\",\r\n        \"deleteEmployee\",\r\n        \"deleteJournalType\",\r\n        \"deletePaymentMean\",\r\n        \"deletePaymentTerm\",\r\n        \"deleteProduct\",\r\n        \"deletePurchaseInvoice\",\r\n        \"deleteSalesDeliveryNote\",\r\n        \"deleteSalesInvoice\",\r\n        \"deleteSalesOrder\",\r\n        \"deleteSalesQuote\",\r\n        \"deleteSupplier\",\r\n        \"documentPdfEmailSalesDeliveryNote\",\r\n        \"documentPdfEmailSalesInvoice\",\r\n        \"documentPdfEmailSalesOrder\",\r\n        \"documentPdfEmailSalesQuote\",\r\n        \"documentPdfPreviewSalesDeliveryNote\",\r\n        \"documentPdfPreviewSalesInvoice\",\r\n        \"documentPdfPreviewSalesOrder\",\r\n        \"documentPdfPreviewSalesQuote\",\r\n        \"documentTypes\",\r\n        \"employees\",\r\n        \"generateCreditNote\",\r\n        \"jobAreas\",\r\n        \"journalTypes\",\r\n        \"organizationAccountingSetupByOrgId\",\r\n        \"organizationById\",\r\n        \"organizations\",\r\n        \"paymentMeans\",\r\n        \"paymentMethods\",\r\n        \"paymentTerms\",\r\n        \"postPurchaseInvoice\",\r\n        \"postSalesInvoice\",\r\n        \"productPriceById\",\r\n        \"products\",\r\n        \"purchaseInvoiceLines\",\r\n        \"purchaseInvoiceOpenItems\",\r\n        \"purchaseInvoices\",\r\n        \"purchaseOpenItemSettlement\",\r\n        \"salesDeliveryNoteLines\",\r\n        \"salesDeliveryNotes\",\r\n        \"salesDiscountLines\",\r\n        \"salesDiscounts\",\r\n        \"salesInvoiceLines\",\r\n        \"salesInvoiceOpenItems\",\r\n        \"salesInvoices\",\r\n        \"salesOpenItemSettlement\",\r\n        \"salesOrderLines\",\r\n        \"salesOrders\",\r\n        \"salesPromotions\",\r\n        \"salesQuoteLines\",\r\n        \"salesQuotes\",\r\n        \"salesTariffLines\",\r\n        \"salesTariffs\",\r\n        \"suppliers\",\r\n        \"taxTreatments\",\r\n        \"taxes\",\r\n        \"updateAccountingAccount\",\r\n        \"updateCustomer\",\r\n        \"updateEmployee\",\r\n        \"updateProduct\",\r\n        \"updatePurchaseInvoice\",\r\n        \"updateSalesDeliveryNote\",\r\n        \"updateSalesInvoice\",\r\n        \"updateSalesOrder\",\r\n        \"updateSalesQuote\",\r\n        \"updateSupplier\",\r\n        \"users\",\r\n        \"zipCodes\"\r\n    ]\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Document types",
					"item": [
						{
							"name": "Q.documentTypes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    documentTypes (\r\n        order:[{code:ASC}]\r\n    ){\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                name\r\n                legislationCode\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Countries",
					"item": [
						{
							"name": "Q.countries",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    countries (\r\n        order : [{isoCodeAlpha2:ASC}]\r\n    ) {\r\n        edges {\r\n            node {\r\n                ...CountryProps\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}\r\n\r\nfragment CountryProps on Country {\r\n    id\r\n    name\r\n    isoCodeAlpha2\r\n    isoCodeAlpha3\r\n    isoNumber\r\n    creationDate\r\n    legislationCode\r\n    modificationDate\r\n    viesCode  \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Zip codes",
					"item": [
						{
							"name": "Q.zipcodes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    zipCodes {\r\n        edges {\r\n            node {\r\n                ...ZipCodeProps\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}\r\n\r\nfragment ZipCodeProps on ZipCode {\r\n    id\r\n    country\r\n    province\r\n    town\r\n    zipCode  \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Q.organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n    organizations {\r\n        edges {\r\n            node {\r\n                id\r\n                onboardingCompleted\r\n                legislationCode\r\n                tenantId\r\n                socialName\r\n                creationDate\r\n                modificationDate\r\n                addresses {\r\n                    firstLine\r\n                    secondLine\r\n                    countryName\r\n                    countryId\r\n                    zipCode\r\n                    city\r\n                    province\r\n                    organizationId\r\n                    modificationDate\r\n                }\r\n                documentTypeId\r\n                contacts {\r\n                    creationDate\r\n                    modificationDate\r\n                    isDefault\r\n                    emails\r\n                    {\r\n                        creationDate\r\n                        modificationDate\r\n                        isDefault\r\n                        emailAddress\r\n                        usage                        \r\n                    }\r\n                    phones {\r\n                        id\r\n                        number                        \r\n                    }\r\n                    socialMedias {\r\n                        name\r\n                        link                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.organization filtered by Id {{X-OrganizationId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query  ($id : UUID!) {\r\n    organizations \r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                onboardingCompleted\r\n                legislationCode\r\n                tenantId\r\n                socialName\r\n                creationDate\r\n                modificationDate\r\n                addresses {\r\n                    firstLine\r\n                    secondLine\r\n                    countryName\r\n                    countryId\r\n                    zipCode\r\n                    city\r\n                    province\r\n                    organizationId\r\n                    modificationDate\r\n                }\r\n                documentTypeId\r\n                contacts {\r\n                    creationDate\r\n                    modificationDate\r\n                    isDefault\r\n                    emails\r\n                    {\r\n                        creationDate\r\n                        modificationDate\r\n                        isDefault\r\n                        emailAddress\r\n                        usage                        \r\n                    }\r\n                    phones {\r\n                        id\r\n                        number                        \r\n                    }\r\n                    socialMedias {\r\n                        name\r\n                        link                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }     \r\n}",
										"variables": "{\r\n    \"id\":\"{{X-OrganizationId}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Q.organizationAccountingSetupByOrgId {{X-OrganizationId}}",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id:ID!){\r\n    organizationAccountingSetupByOrgId(id: $id) {\r\n        id\r\n        organizationId \r\n        defaultCustomersAccountId\r\n        defaultSuppliersAccountId\r\n        subAccountingLength\r\n        taxRegime\r\n        annualAccountsModel\r\n    }\r\n}",
										"variables": "{\r\n    \"id\":\"{{X-OrganizationId}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "This section specifically discusses resources that are common to all organizations within a single tenant. These resources are:\n\n- Users\n    \n- Countries\n    \n- Zip Codes\n    \n- Document Types"
		},
		{
			"name": "Reference : related to an organization",
			"item": [
				{
					"name": "Accounting",
					"item": [
						{
							"name": "Accounting Accounts",
							"item": [
								{
									"name": "M.create, update, delete  go to \"Discover mutations\"",
									"item": [],
									"description": "To avoid redundancy, the example for creating, updating or deleting an account can be found in the section titled '**Discover mutations to create, update, delete**'."
								},
								{
									"name": "Q.accountingAccounts - first is filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingAccounts {\r\n        edges {\r\n            node {\r\n                id\r\n                accountLevel\r\n                accountType\r\n                code\r\n                subAccountType\r\n                description\r\n                taxTreatmentId\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.accountingAccounts filtered by Id {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"accountingAccountId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
													"    console.log(\"'accountingAccountId' environment variable has been created : \" + pm.environment.get(\"accountingAccountId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    accountingAccounts\r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                accountLevel\r\n                accountType\r\n                code\r\n                subAccountType\r\n                description\r\n                taxTreatmentId\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Plan master",
							"item": [
								{
									"name": "⚙️ Q.accountingPlansMasterById chart of account - id filled in {{accountingPlanMasterId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let legislationCode = pm.environment.get(\"legislationCode\");\r",
													"\r",
													"if (legislationCode === 'FR') {\r",
													"    pm.environment.set(\"accountingPlanMasterId\", \"361df67e-be73-460d-b3cc-218944176536\");\r",
													"} else if (legislationCode === 'ES') {\r",
													"    pm.environment.set(\"accountingPlanMasterId\", \"4f51df1d-25d9-4a3b-9550-33e7e3cc11f7\");\r",
													"} else if (legislationCode === 'DE') {\r",
													"    pm.environment.set(\"accountingPlanMasterId\", \"d85024a3-d5d5-481f-8671-184711e2cb5e\");\r",
													"} else {\r",
													"    console.error(\"Unexpected legislationCode value\");\r",
													"    return;\r",
													"}\r",
													"\r",
													"console.log(\"'accountingPlanMasterId' environment variable has been created with value: \" \r",
													"    + pm.environment.get(\"accountingPlanMasterId\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id:ID!) {\r\n    accountingPlansMasterById(id: $id) {\r\n        id\r\n        description\r\n        accountingPlanMasterLines {\r\n            code\r\n            name\r\n            accountLevel\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n  \"id\":\"{{accountingPlanMasterId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "⚙️ M.accountingPlanMasterImport",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let legislationCode = pm.environment.get(\"legislationCode\");\r",
													"\r",
													"if (legislationCode === 'FR') {\r",
													"    pm.environment.set(\"subAccountLength\", \"8\");\r",
													"} else if (legislationCode === 'ES') {\r",
													"      pm.environment.set(\"subAccountLength\", \"8\");\r",
													"} else if (legislationCode === 'DE') {\r",
													"    pm.environment.set(\"subAccountLength\", \"4\");\r",
													"\r",
													"} else {\r",
													"    console.error(\"Unexpected legislationCode value\");\r",
													"    return;\r",
													"}\r",
													"\r",
													"console.log(\"'subAccountLength environment variable has been created with value: \" \r",
													"    + pm.environment.get(\"subAccountLength\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values: AccountingPlanMasterImportGLDtoInput!) {  \r\n    accountingPlanMasterImport(input: $values) {\r\n    id\r\n  }\r\n}\r\n",
												"variables": "{\r\n  \"values\":{\r\n    \"accountingPlanMasterId\": \"{{accountingPlanMasterId}}\",\r\n    \"subAccountLength\":{{subAccountLength}}\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Exercises",
							"item": [
								{
									"name": "Q.accountingExercises - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"    console.log(jsd.data.accountingExercises.edges[0].node.id);\r",
													"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\",jsd.data.accountingExercises.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingExercises {\r\n        edges {\r\n            node {\r\n               id\r\n               exercise\r\n               status\r\n               startDate\r\n               endDate\r\n               description\r\n               periods {\r\n                   startDate\r\n                   endDate\r\n               }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.accountingExercises filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    accountingExercises\r\n     (where : { id : { eq : $id }})  {\r\n        edges {\r\n            node {\r\n               id\r\n               exercise\r\n               status\r\n               startDate\r\n               endDate\r\n               description\r\n               periods {\r\n                   startDate\r\n                   endDate\r\n               }\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n    \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.createAccountingExercise",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is OK 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSon\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"\r",
													"    let result = jsd.data.createAccountingExercise;\r",
													"    pm.environment.set(\"accountingExerciseId\", result.id);\r",
													"    console.log(\"'accountingExerciseId' environment variable has been created : \" + pm.environment.get(\"accountingExerciseId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values: AccountingExerciseCreateGLDtoInput!) {  \r\n  createAccountingExercise (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"values\":{\r\n      \"exercise\":2023,\r\n      \"description\":\"Exo2023\",\r\n      \"startDate\":\"2023-01-01\",\r\n      \"numberPeriods\":12\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Journal Types",
							"item": [
								{
									"name": "M.create, then delete a journalType",
									"item": [
										{
											"name": "1- Q.accountingAccounts - fill in  {{accountId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"accountId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
															"    console.log(\"'accountId' environment variable has been created : \" + pm.environment.get(\"accountId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    accountingAccounts (\r\n        where :{\r\n             or:[\r\n             {code : { startsWith : \"5121\" }}\r\n             {code : { startsWith : \"5123\" }}\r\n             {code : { startsWith : \"1210\" }}\r\n             ]\r\n             }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                code,\r\n                id\r\n            \r\n            }\r\n        }     \r\n    }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2- M.createJournalType  - new id filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createJournalType;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: JournalTypeCreateGLDtoInput!) {  \r\n  createJournalType (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
														"variables": "{\r\n    \"values\":{\r\n      \"code\":\"FINJT\",\r\n      \"name\":\"FinancialJournalType\",\r\n      \"type\":\"FINANCIAL\",\r\n      \"accountingAccountId\":\"{{accountId}}\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3- M.deleteJournalType {{currentId}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values:JournalTypeDeleteGLDtoInput!) {\r\n    deleteJournalType(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Q.journalTypes - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.journalTypes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.journalTypes.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    journalTypes {\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n               accountingAccountId\r\n               deactivated\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.journalTypes filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    journalTypes\r\n     (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n               id\r\n               code\r\n               type\r\n               name\r\n               accountingAccountId\r\n               deactivated\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Taxes",
							"item": [
								{
									"name": "Q.taxes",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    taxes {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                groupName\r\n                groupId\r\n                effectiveDate\r\n                inactive\r\n                inactivationDate\r\n                equivalenceSurchargePercentage\r\n                percentage\r\n                hasEquivalenceSurcharge\r\n                taxType\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Taxes Treatments",
							"item": [
								{
									"name": "Q.taxTreatments",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    taxTreatments {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                description\r\n                taxCode\r\n                inactive\r\n                admitsCashVAT\r\n                hasPercentageCompensation\r\n                hasSurcharge\r\n                intraKey\r\n                invoiceTypeId\r\n                isImplicit\r\n                isIntracomunity\r\n                isService\r\n                isState\r\n                regimeType\r\n                registerType\r\n                taxGroupId\r\n                taxGroupName\r\n                taxOperationTypeId\r\n                taxOperationTypeName\r\n                taxType\r\n                transcendenceKey\r\n                inputAccountingAccount {\r\n                    code\r\n                    accountLevel\r\n                    accountType\r\n                    description\r\n                }\r\n                outputAccountingAccount {\r\n                    code\r\n                    accountLevel\r\n                    accountType\r\n                    description\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Entries",
							"item": [
								{
									"name": "M.create, delete go to chapter \"Discover mutations\"",
									"item": [],
									"description": "To avoid redundancy, the example for creating and deleting an accountingentry can be found in the section titled '**Discover mutations to create, update, delete**'."
								},
								{
									"name": "Q.accountingEntries - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingEntries.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.accountingEntries.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingEntries {\r\n        edges {\r\n            node {\r\n                id\r\n                entryType\r\n                date\r\n                number        \r\n                sourceType                \r\n                accountingEntryLines {\r\n                    description\r\n                    creditAmount\r\n                    debitAmount\r\n                    order\r\n                    accountingEntryThirdParty {\r\n                        id\r\n                        code\r\n                        countryAcronym\r\n                        documentId\r\n                        identificationTypeId\r\n                        socialName\r\n                        thirdPartyId\r\n                        documentId\r\n                    }\r\n                    accountingEntryPayment {\r\n                        id                        \r\n                        matching\r\n                        matchingLetter\r\n                    }\r\n                    accountingEntryInvoice {\r\n                        id                        \r\n                        externalInvoiceNumber                  \r\n                        amount\r\n                        accountingEntryTaxes {\r\n                            regimeType\r\n                            taxAmount\r\n                            taxBase\r\n                            taxPercentage\r\n                            taxGroupId\r\n                            taxTreatmentId\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.accountingEntries filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    accountingEntries\r\n     (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                entryType\r\n                date\r\n                number                        \r\n                accountingEntryLines {\r\n                    description\r\n                    creditAmount\r\n                    debitAmount\r\n                    order\r\n                    accountingEntryThirdParty {\r\n                        id\r\n                        code\r\n                        countryAcronym\r\n                        documentId\r\n                        identificationTypeId\r\n                        socialName\r\n                        thirdPartyId\r\n                        documentId\r\n                    }\r\n                    accountingEntryPayment {\r\n                        id                        \r\n                        matching\r\n                        matchingLetter\r\n                    }\r\n                    accountingEntryInvoice {\r\n                        id                        \r\n                        externalInvoiceNumber                  \r\n                        amount\r\n                        accountingEntryTaxes {\r\n                            regimeType\r\n                            taxAmount\r\n                            taxBase\r\n                            taxPercentage\r\n                            taxGroupId\r\n                            taxTreatmentId\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "⚙️ Trial Balance",
							"item": [
								{
									"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0) {\r",
													"        console.error(\"Unable to save environment variables\");\r",
													"        return;\r",
													"    }\r",
													"    pm.environment.set(\"startDate\", jsd.data.accountingExercises.edges[0].node.startDate);\r",
													"    pm.environment.set(\"endDate\", jsd.data.accountingExercises.edges[0].node.endDate);\r",
													"    pm.environment.set(\"exerciseId\", jsd.data.accountingExercises.edges[0].node.id);   // Setting the id environment variable\r",
													"    console.log(\"'startDate', 'endDate', and 'exerciseId' environment variables have been created: \" \r",
													"    + pm.environment.get(\"startDate\") + \"-\" + pm.environment.get(\"endDate\") + \", exerciseId: \" + pm.environment.get(\"exerciseId\"));\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        last:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                id\r\n                startDate\r\n                endDate\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "2- ⚙️ Q.accountingTrialBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingEntries.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.accountingEntries.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query($input: AccountingTrialBalanceGLDtoInput!) {\r\n  accountingTrialBalance(input: $input) {\r\n    accountCode\r\n    accountDescription\r\n    accountType\r\n    accumulatedBalance\r\n    accumulatedCreditAmount\r\n    accumulatedCreditBalance\r\n    accumulatedDebitAmount\r\n    accumulatedDebitBalance\r\n    balance\r\n    creditAmount\r\n    creditBalance\r\n    debitAmount\r\n    debitBalance\r\n  }\r\n}",
												"variables": "{\r\n  \"input\": {\r\n    \"startAccountCode\": \"1000\",\r\n    \"endAccountCode\": \"3999\",\r\n    \"exerciseId\": \"{{exerciseId}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"endDate\": \"{{endDate}}\",\r\n    \"isWithoutZeroBalance\": true,\r\n    \"isTrialBalanceComparative\": true,\r\n    \"showTemporaryCarryForward\": true,\r\n    \"showClosingEntries\": false\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "⚙️ Third Party Balance",
							"item": [
								{
									"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0) {\r",
													"        console.error(\"Unable to save environment variables\");\r",
													"        return;\r",
													"    }\r",
													"    pm.environment.set(\"startDate\", jsd.data.accountingExercises.edges[0].node.startDate);\r",
													"    pm.environment.set(\"endDate\", jsd.data.accountingExercises.edges[0].node.endDate);\r",
													"    pm.environment.set(\"exerciseId\", jsd.data.accountingExercises.edges[0].node.id);   // Setting the id environment variable\r",
													"    console.log(\"'startDate', 'endDate', and 'exerciseId' environment variables have been created: \" \r",
													"    + pm.environment.get(\"startDate\") + \"-\" + pm.environment.get(\"endDate\") + \", exerciseId: \" + pm.environment.get(\"exerciseId\"));\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        last:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                id\r\n                startDate\r\n                endDate\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "2- ⚙️ Q.accountingThirdPartyBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingEntries.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.accountingEntries.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query($input: AccountingThirdPartyBalanceGLDtoInput!) {\r\n  accountingThirdPartyBalance(input: $input) {\r\n    thirdPartyDescription\r\n    thirdPartyId\r\n    accumulatedBalance\r\n    accumulatedCreditAmount\r\n    accumulatedCreditBalance\r\n    accumulatedDebitAmount\r\n    accumulatedDebitBalance\r\n    balance\r\n    creditAmount\r\n    creditBalance\r\n    debitAmount\r\n    debitBalance\r\n  }\r\n}",
												"variables": "{\r\n  \"input\":{\r\n    \"thirdPartyCodeFrom\": \"\",\r\n    \"thirdPartyCodeTo\": \"ZZZZ\",\r\n    \"thirdPartyType\": \"CUSTOMER\",\r\n    \"exerciseId\": \"{{exerciseId}}\",\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"endDate\": \"{{endDate}}\",\r\n    \"isWithoutZeroBalance\": true,\r\n    \"isBalanceComparative\": true,\r\n    \"showTemporaryCarryForward\": true\r\n}\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This section is dedicated to the accounting resources managed within the context of an organization. Accounting is the backbone of financial management and compliance in an organization.  \nThe resources described under this chapter are critical for various accounting operations such as general ledger management, tax calculation, and accounting entries.EndFragment"
				},
				{
					"name": "Third parties",
					"item": [
						{
							"name": "Customers",
							"item": [
								{
									"name": "M.create, update, go to chapter \"Discover mutations\"",
									"item": [],
									"description": "To avoid redundancy, the example for creating and updating a customer can be found in the section titled '**Discover mutations to create, update, delete**'."
								},
								{
									"name": "Q.customers - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.customers.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    customers {\r\n        edges {\r\n            node {\r\n                    id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts{\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                isDefault\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    type\r\n                    value\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId              \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.customers filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    customers\r\n     (where : { id : { eq : $id }})  {\r\n        edges {\r\n            node {\r\n                id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts{\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                isDefault\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    type\r\n                    value\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId              \r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Suppliers",
							"item": [
								{
									"name": "M.create a supplier, then update it, the delete it",
									"item": [
										{
											"name": "1 - M.createSupplier without code & contact - {{supplierId}} filled in",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSupplier;\r",
															"    pm.environment.set(\"supplierId\", result.id);\r",
															"    console.log(\"'supplierId' environment variable has been created : \" + pm.environment.get(\"supplierId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let legislationCode = pm.environment.get(\"legislationCode\");\r",
															"\r",
															"if (legislationCode === 'FR') {\r",
															"    pm.environment.set(\"identificationNumber\", \"323456789\");\r",
															"    pm.environment.set(\"vatNumber\",\"FR33323456789\");\r",
															"} else if (legislationCode === 'ES') {\r",
															"    pm.environment.set(\"identificationNumber\", \"Z4660201S\");\r",
															"    pm.environment.set(\"vatNumber\",\"ESZ4660201S\");\r",
															"} else if (legislationCode === 'DE') {\r",
															"    pm.environment.set(\"identificationNumber\", \"80715887835\");\r",
															"    pm.environment.set(\"vatNumber\",\"DE807158878\");\r",
															"} else {\r",
															"    console.error(\"Unexpected legislationCode value\");\r",
															"    return;\r",
															"}\r",
															"\r",
															"console.log(\"'identificationNumber' & 'vatNumber' environment variables has been created with value: \" \r",
															"    + pm.environment.get(\"identificationNumber\")+\" - \"+pm.environment.get(\"vatNumber\"));\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SupplierCreateGLDtoInput!) {  \r\n  createSupplier (input: $values) {\r\n    id\r\n    code\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"documentId\":\"{{identificationNumber}}\",\r\n    \"vatNumber\":\"{{vatNumber}}\",\r\n    \"socialName\": \"Supplier Demo\",\r\n    \"tradeName\": \"SupplDemo\",\r\n    \"addresses\": [{\r\n      \"firstLine\": \"123 Generic street\",\r\n      \"city\": \"Generic City\",\r\n      \"zipCode\": \"12345\",\r\n      \"countryIsoCodeAlpha2\":\"{{legislationCode}}\"\r\n    }]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - M.createSupplier with code & contact - {{supplierId}} filled in",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSupplier;\r",
															"    pm.environment.set(\"supplierId\", result.id);\r",
															"    console.log(\"'supplierId' environment variable has been created : \" + pm.environment.get(\"supplierId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let legislationCode = pm.environment.get(\"legislationCode\");\r",
															"\r",
															"if (legislationCode === 'FR') {\r",
															"    pm.environment.set(\"identificationNumber\", \"926137613\");\r",
															"    pm.environment.set(\"vatNumber\",\"FR33926137613\");\r",
															"    pm.environment.set(\"code\",\"SUPPLDEMO\");\r",
															"} else if (legislationCode === 'ES') {\r",
															"    pm.environment.set(\"identificationNumber\", \"Y0476607S\");\r",
															"    pm.environment.set(\"vatNumber\",\"ESY0476607S\");\r",
															"    pm.environment.set(\"code\",\"SUPPLDEMO\");\r",
															"} else if (legislationCode === 'DE') {\r",
															"    pm.environment.set(\"identificationNumber\", \"90881100521\");\r",
															"    pm.environment.set(\"vatNumber\",\"DE908811005\");\r",
															"    pm.environment.set(\"code\",\"70200\");\r",
															"} else {\r",
															"    console.error(\"Unexpected legislationCode value\");\r",
															"    return;\r",
															"}\r",
															"\r",
															"console.log(\"'identificationNumber' & 'vatNumber' environment variables has been created with value: \" \r",
															"    + pm.environment.get(\"identificationNumber\")+\" - \"+pm.environment.get(\"vatNumber\"));\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SupplierCreateGLDtoInput!) {  \r\n  createSupplier (input: $values) {\r\n    id\r\n    code\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"code\": \"{{code}}\",\r\n    \"documentId\":\"{{identificationNumber}}\",\r\n    \"vatNumber\":\"{{vatNumber}}\",\r\n    \"socialName\": \"Supplier Demo\",\r\n    \"tradeName\": \"SupplDemo\",\r\n    \"addresses\": [{\r\n      \"firstLine\": \"123 Generic street\",\r\n      \"city\": \"Generic City\",\r\n      \"zipCode\": \"12345\",\r\n      \"countryIsoCodeAlpha2\":\"{{legislationCode}}\"\r\n    }],\r\n    \"contacts\":[{\r\n      \"isDefault\":true,\r\n      \"courtesy\":\"MR\",\r\n      \"name\":\"John\",\r\n      \"surname\":\"Smith\",\r\n      \"phones\":[{\r\n          \"isDefault\":true,\r\n          \"number\":\"01 02 03 04 05\",\r\n          \"type\":\"EMPTY\"\r\n      },\r\n      {\r\n          \"number\":\"06 07 08 09 10\",\r\n          \"type\":\"MOBILE\"\r\n      }],\r\n      \"emails\":[{\r\n          \"emailAddress\":\"smith@customerdemo.com\",\r\n          \"usage\":\"EMPTY\"\r\n      },\r\n      {\r\n          \"emailAddress\":\"info@customerdemo.com\",\r\n          \"usage\":\"PAYMENTS\",\r\n          \"isDefault\":true\r\n      }]\r\n    },\r\n    {\r\n      \"isDefault\":false,\r\n      \"name\":\"Infos\",\r\n      \"socialMedias\":[{\r\n          \"name\":\"site1\",\r\n          \"link\":\"www.customerdemo.com\"\r\n      }]\r\n    }]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3 - Q.suppliers filtered by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.suppliers.edges.length === 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    let suppl = jsd.data.suppliers.edges[0].node;\r",
															"    if (suppl.addresses && suppl.addresses.length > 0)\r",
															"    {\r",
															"      pm.environment.set(\"supplAddressId\", suppl.addresses[0].id);\r",
															"      console.log(\"'supplAddressId' environment variable has been created : \" + pm.environment.get(\"supplAddressId\"));\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  ($id : UUID!) {\r\n    suppliers \r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                tradeName\r\n                code\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    city\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts {\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId           \r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"id\":\"{{supplierId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4 - M.updateSupplier {{supplierId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SupplierUpdateGLDtoInput!) {  \r\n  updateSupplier (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{supplierId}}\",\r\n    \"addresses\": [{\r\n      \"id\": \"{{supplAddressId}}\",\r\n      \"requestedAction\":\"MODIFY\",\r\n      \"firstLine\": \"Rue tête d'Or MODIFY\"\r\n    }]\r\n }\r\n}\r\n    "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5 - Q.suppliers filtered by Id Updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  ($id : UUID!) {\r\n    suppliers \r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                tradeName\r\n                code\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    city\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress\r\n                }\r\n                contacts {\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId             \r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"id\":\"{{supplierId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6 - M.deleteSupplier {{supplierId}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values:SupplierDeleteGLDtoInput!) {\r\n    deleteSupplier(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{supplierId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "The initial example for creation without a code **assumes that automatic numbering for the Supplier resource is not inactive** in Sage Active under _Configuration > Company > Sequence Numbers._"
								},
								{
									"name": "Q.suppliers - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.suppliers.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.suppliers.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    suppliers {\r\n        edges {\r\n            node {\r\n                id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress                }\r\n                contacts {\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId            \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }   \r\n}\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.suppliers filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    suppliers \r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id   \r\n                socialName\r\n                tradeName\r\n                code\r\n                documentId\r\n                documentTypeId\r\n                countryAcronym\r\n                addresses {\r\n                    id\r\n                    firstLine\r\n                    secondLine\r\n                    city\r\n                    zipCode\r\n                    countryId\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                    name\r\n                    isDeliveryAddress\r\n                    isDefaultDeliveryAddress                }\r\n                contacts {\r\n                isDefault\r\n                courtesy\r\n                name\r\n                surname\r\n                emails {\r\n                    emailAddress\r\n                    usage\r\n                }\r\n                phones {\r\n                    number\r\n                    type\r\n                }\r\n                socialMedias {\r\n                    link\r\n                    name\r\n                }\r\n                }\r\n                paymentTermLines {\r\n                    id\r\n                    day\r\n                    condition\r\n                    payDays\r\n                    order\r\n                }\r\n                defaultAccountingAccountId              \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Employees",
							"item": [
								{
									"name": "M.Create an employee, update an employee",
									"item": [
										{
											"name": "1 - M.createEmployee without code - first id filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.createEmployee == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.createEmployee.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: EmployeeCreateGLDtoInput!) {  \r\n  createEmployee(input: $values) {\r\n    id\r\n    code\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"name\": \"Léon DURANT\",\r\n    \"shortName\": \"LEDU\",\r\n    \"comments\":\"Employee of the year\",\r\n      \"addresses\": [{\r\n      \"firstLine\": \"123 Generic street\",\r\n      \"city\": \"Generic City\",\r\n      \"zipCode\": \"12345\",\r\n      \"countryIsoCodeAlpha2\":\"{{legislationCode}}\"\r\n      }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - M.updateEmployee {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: EmployeeUpdateGLDtoInput!) {  \r\n  updateEmployee (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\",\r\n    \"name\": \"Léon DURANT MODIFY\"\r\n    }\r\n}\r\n    "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3 - M.deleteEmployee {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: EmployeeUpdateGLDtoInput!) {  \r\n  updateEmployee (input: $values) {\r\n    id\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\",\r\n    \"name\": \"Léon DURANT MODIFY\"\r\n    }\r\n}\r\n    "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "The initial example for creation without a code **assumes that automatic numbering for the Employee resource is not inactive** in Sage Active under _Configuration > Company > Sequence Numbers._"
								},
								{
									"name": "Q.employees - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.employees.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.employees.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    employees {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                name\r\n                shortName\r\n                status    \r\n                comments\r\n                addresses {\r\n                    firstLine\r\n                    secondLine\r\n                    zipCode\r\n                    city\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                }\r\n                contacts {\r\n                    isDefault\r\n                    courtesy\r\n                    name\r\n                    surname\r\n                    emails {\r\n                        emailAddress\r\n                        usage\r\n                    }\r\n                    phones {\r\n                        number\r\n                        type\r\n                    }\r\n                    socialMedias {\r\n                        link\r\n                        name\r\n                    }\r\n                }\r\n                defaultAccountingAccountId                \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }   \r\n}\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.employees filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    employees \r\n    (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                code\r\n                name\r\n                shortName\r\n                status    \r\n                comments\r\n                addresses {\r\n                    firstLine\r\n                    secondLine\r\n                    zipCode\r\n                    city\r\n                    countryName\r\n                    countryIsoCodeAlpha2\r\n                }\r\n                contacts {\r\n                    isDefault\r\n                    courtesy\r\n                    name\r\n                    surname\r\n                    emails {\r\n                        emailAddress\r\n                        usage\r\n                    }\r\n                    phones {\r\n                        number\r\n                        type\r\n                    }\r\n                    socialMedias {\r\n                        link\r\n                        name\r\n                    }\r\n                }\r\n                defaultAccountingAccountId                \r\n            }\r\n        }\r\n    }   \r\n}\r\n\r\n",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Business areas",
							"item": [
								{
									"name": "Q.businessAreas  - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.businessAreas.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.businessAreas.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    businessAreas {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                creationDate\r\n                modificationDate\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.businessAreas filtered by Id  {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    businessAreas {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                creationDate\r\n                modificationDate\r\n            }\r\n        }\r\n    }    \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.createBusinessArea - new id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.createBusinessArea == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    let result = jsd.data.createBusinessArea;\r",
													"    pm.environment.set(\"currentId\", result.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:BusinessAreaCreateGLDtoInput!) {\r\n    createBusinessArea(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\":{\r\n    \"name\":\"Business Area 1\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.deleteBusinessArea {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:BusinessAreaDeleteGLDtoInput!) {\r\n    deleteBusinessArea(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Job areas",
							"item": [
								{
									"name": "Q.jobAreas - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.jobAreas.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.jobAreas.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    jobAreas {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                creationDate\r\n                modificationDate\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }    \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.jobAreas filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    jobAreas {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                creationDate\r\n                modificationDate\r\n            }\r\n        }\r\n    }    \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.createJobArea",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:JobAreaCreateGLDtoInput!) {\r\n    createJobArea(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\":{\r\n    \"name\":\"Job Area 1\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payment means",
							"item": [
								{
									"name": "Q.paymentMeans - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.paymentMeans.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.paymentMeans.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    paymentMeans {\r\n        edges {\r\n            node {\r\n                id\r\n                creationDate\r\n                description\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.paymentMeans filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    paymentMeans \r\n     (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                creationDate\r\n                description\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.createPaymentMean - new id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.createPaymentMean == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    let result = jsd.data.createPaymentMean;\r",
													"    pm.environment.set(\"currentId\", result.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:PaymentMeanCreateGLDtoInput!) {\r\n    createPaymentMean(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\":{\r\n    \"description\":\"description payment\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.deletePaymentMean {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:PaymentMeanDeleteGLDtoInput!) {\r\n    deletePaymentMean(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "🆕 Payment methods",
							"item": [
								{
									"name": "Q.paymentMethods - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.paymentMethods.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.paymentMethods.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    paymentMethods {\r\n        edges {\r\n            node {\r\n                id\r\n                creationDate\r\n                referenceName\r\n                type\r\n                journalType{\r\n                    code\r\n                }\r\n                subAccount{\r\n                    code\r\n                }\r\n                \r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.paymentMethods filtered by Id {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    paymentMethods\r\n     (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                  id\r\n                creationDate\r\n                referenceName\r\n                type\r\n                journalType{\r\n                    code\r\n                }\r\n                subAccount{\r\n                    code\r\n                }\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payment terms",
							"item": [
								{
									"name": "Q.paymentTerms - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.paymentTerms.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.paymentTerms.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    paymentTerms {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                modificationDate\r\n                lines {\r\n                    type\r\n                    paymentMeanId\r\n                    id\r\n                    day\r\n                    condition\r\n                    order\r\n                    payDays\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n            hasNextPage\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.paymentTerms filtered by Id {{currentId}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n    paymentTerms\r\n     (where : { id : { eq : $id }}) {\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                modificationDate\r\n                lines {\r\n                    type\r\n                    paymentMeanId\r\n                    id\r\n                    day\r\n                    condition\r\n                    order\r\n                    payDays\r\n                }\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": "{\r\n    \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.createPaymentTerm - new id filled in  {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.createPaymentTerm == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    let result = jsd.data.createPaymentTerm;\r",
													"    pm.environment.set(\"currentId\", result.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:PaymentTermCreateGLDtoInput!) {\r\n    createPaymentTerm(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\":{\r\n    \"name\":\"PaymentTermMulti\",\r\n    \"lines\":[\r\n    {\r\n      \"type\":\"FIXED_AMOUNT\",\r\n      \"value\":500,\r\n      \"order\":1,\r\n      \"condition\":\"DAY_OF_PAYMENT\"\r\n    },\r\n     {\r\n      \"type\":\"PERCENTAGE\",\r\n      \"value\":30,\r\n      \"order\":2,\r\n      \"condition\":\"END_OF_MONTH\"\r\n    },\r\n     {\r\n      \"type\":\"REMAINING_AMOUNT\",\r\n      \"value\":0,\r\n      \"order\":9999,\r\n      \"condition\":\"END_OF_MONTH\",\r\n      \"day\":60\r\n    }\r\n    ]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "M.deletePaymentTerm {{currentId}}",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:PaymentTermDeleteGLDtoInput!) {\r\n    deletePaymentTerm(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This section provides details on third-party entities that interact with organizations.  \nThese entities include Customers, Suppliers, and Employees"
				},
				{
					"name": "Product management",
					"item": [
						{
							"name": "Products",
							"item": [
								{
									"name": "M.createProduct then update it, then delete it",
									"item": [
										{
											"name": "1- M.createProduct with default Tax Group- new id filled in {{currentid}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.createProduct == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.createProduct.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: ProductCreateGLDtoInput!) {  \r\n    createProduct(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n      \"code\": \"PRODUCT01\",\r\n      \"name\": \"Test Product\",\r\n      \"comments\": \"comment\",\r\n      \"lineDescription\": \"Description Product\",\r\n      \"salesUnitPrice\":45\r\n  }\r\n} "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2- M.updateProduct {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: ProductUpdateGLDtoInput!) {  \r\n    updateProduct(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n      \"id\":\"{{currentId}}\",\r\n      \"name\": \"Product update\",\r\n      \"comments\": \"comment update\",\r\n      \"salesUnitPrice\": 46\r\n  }\r\n} "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3- M.deleteProduct {{currentId}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values:ProductDeleteGLDtoInput!) {\r\n    deleteProduct(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "🆕 M.createProduct for a specific tax percentage",
									"item": [
										{
											"name": "1- Q.taxes First Tax not DOM, Tax Group filled in {{taxGroupId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    // Ensure the taxes query returns data and has at least one tax item\r",
															"    if (jsd.data == null || jsd.data.taxes == null || jsd.data.taxes.edges.length === 0) {\r",
															"        console.error(\"No tax data available to save as environment variable\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Get the groupId from the first tax entry in the list\r",
															"    let groupId = jsd.data.taxes.edges[0].node.groupId;\r",
															"    if (groupId != null) {\r",
															"        pm.environment.set(\"taxGroupId\", groupId);\r",
															"        console.log(\"'taxGroupId' environment variable has been created : \" + pm.environment.get(\"taxGroupId\"));\r",
															"    } else {\r",
															"        console.error(\"groupId is missing in the tax data\");\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    taxes(\r\n        first:1\r\n        where:{taxType:{neq:DOM}}\r\n    ) {\r\n        edges {\r\n            node {\r\n                name\r\n                groupName\r\n                groupId\r\n                percentage\r\n\r\n            }\r\n        }\r\n    }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2- M.createProduct attachad to this Tax Group- new id filled in {{currentid}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.createProduct == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.createProduct.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: ProductCreateGLDtoInput!) {  \r\n    createProduct(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\":{\r\n      \"code\": \"PRODUCT01\",\r\n      \"name\": \"Test Product\",\r\n      \"comments\": \"comment\",\r\n      \"lineDescription\": \"Description Product\",\r\n      \"salesUnitPrice\":45,\r\n      \"taxGroupId\":\"{{taxGroupId}}\"\r\n  }\r\n} "
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Q.Products - first is filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is OK 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSon\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
													"        throw new Error(\"Unable to save environment variable\");\r",
													"    pm.environment.set(\"productId\", jsd.data.products.edges[0].node.id);\r",
													"    console.log(\"'productId' environment variable has been created : \" + pm.environment.get(\"productId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  products {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n        category\r\n        salesUnitPrice\r\n        firstSalesDiscount\r\n        taxGroupId\r\n        taxes{\r\n            groupName\r\n            name\r\n            percentage\r\n            equivalenceSurchargePercentage\r\n            taxType\r\n        }\r\n        lineDescription\r\n        comments\r\n        creationDate\r\n        modificationDate\r\n        obsolete\r\n        salesAccountingAccountId\r\n        salesAccountingAccount{\r\n            code\r\n        }\r\n        salesDeliveryNoteBlockingEnabled\r\n        salesInvoiceBlockingEnabled\r\n        salesOrderBlockingEnabled\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.Products filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is OK 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSon\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n  products \r\n  (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n        category\r\n        salesUnitPrice\r\n        firstSalesDiscount\r\n        taxGroupId\r\n        lineDescription\r\n        comments\r\n        creationDate\r\n        modificationDate\r\n        obsolete\r\n        salesAccountingAccountId\r\n        salesDeliveryNoteBlockingEnabled\r\n        salesInvoiceBlockingEnabled\r\n        salesOrderBlockingEnabled\r\n      }\r\n    }\r\n  }     \r\n}",
												"variables": "{\r\n    \"id\":\"{{productId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "⚙️ Product Price service",
							"item": [
								{
									"name": "Product Price for a customer",
									"item": [
										{
											"name": "1-Q.Products - first product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"productId\", jsd.data.products.edges[0].node.id);\r",
															"    console.log(\"productId environment variable has been created : \" + pm.environment.get(\"productId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:1\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.customers - first activated + socialName starts by A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            socialName: {startsWith: \"a\"}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3- ⚙️ Q-Action.ProductPriceById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status is OK 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Response is JSon\", function () {\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($id: ID!, $productPrice: ProductPriceGLDtoInput!) {\r\n  productPriceById(id: $id, productPrice: $productPrice) {\r\n    price {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    firstDiscount {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    taxGroupId\r\n    taxId\r\n    equivalenceSurchargePercentage\r\n    taxPercentage\r\n    taxTreatmentId\r\n  }\r\n}",
														"variables": "{\r\n    \"id\":\"{{productId}}\",\r\n    \"productPrice\" : {\r\n        \"documentDate\" : \"2023-10-17\",\r\n        \"quantity\" : 5,\r\n        \"customerId\":\"{{customerId}}\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Product Price for a lead (no customer)",
									"item": [
										{
											"name": "1-Q.Products - first product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"productId\", jsd.data.products.edges[0].node.id);\r",
															"    console.log(\"productId environment variable has been created : \" + pm.environment.get(\"productId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:1\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q-Action.ProductPriceById Country=current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status is OK 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Response is JSon\", function () {\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($id: ID!, $productPrice: ProductPriceGLDtoInput!) {\r\n  productPriceById(id: $id, productPrice: $productPrice) {\r\n    price {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    firstDiscount {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    taxGroupId\r\n    taxId\r\n    equivalenceSurchargePercentage\r\n    taxPercentage\r\n    taxTreatmentId\r\n  }\r\n}",
														"variables": "{\r\n    \"id\":\"{{productId}}\",\r\n    \"productPrice\" : {\r\n        \"documentDate\" : \"2023-10-17\",\r\n        \"quantity\" : 5\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-Q.documentType 02 (country=VIES)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.documentTypes.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for documentTypes\");return;}\r",
															"    pm.environment.set(\"documentTypeId\", jsd.data.documentTypes.edges[0].node.id);\r",
															"    console.log(\"documentTypeId environment variable has been created : \" + pm.environment.get(\"documentTypeId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    documentTypes (\r\n        where: {code: {eq:\"02\"}}\r\n    ) {\r\n        edges {\r\n            node {\r\n                id\r\n            }\r\n        }\r\n    }    \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4- ⚙️ Q-Action.ProductPriceById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status is OK 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Response is JSon\", function () {\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($id: ID!, $productPrice: ProductPriceGLDtoInput!) {\r\n  productPriceById(id: $id, productPrice: $productPrice) {\r\n    price {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    firstDiscount {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    taxGroupId\r\n    taxId\r\n    equivalenceSurchargePercentage\r\n    taxPercentage\r\n    taxTreatmentId\r\n  }\r\n}",
														"variables": "{\r\n    \"id\":\"{{productId}}\",\r\n    \"productPrice\" : {\r\n        \"documentDate\" : \"2023-10-17\",\r\n        \"quantity\" : 5,\r\n        \"documentTypeId\":\"{{documentTypeId}}\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-Q.documentType 06 (country<>VIES)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.documentTypes.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for documentTypes\");return;}\r",
															"    pm.environment.set(\"documentTypeId\", jsd.data.documentTypes.edges[0].node.id);\r",
															"    console.log(\"documentTypeId environment variable has been created : \" + pm.environment.get(\"documentTypeId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    documentTypes (\r\n        where: {code: {eq:\"06\"}}\r\n    ) {\r\n        edges {\r\n            node {\r\n                id\r\n            }\r\n        }\r\n    }    \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6- ⚙️ Q-Action.ProductPriceById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status is OK 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Response is JSon\", function () {\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($id: ID!, $productPrice: ProductPriceGLDtoInput!) {\r\n  productPriceById(id: $id, productPrice: $productPrice) {\r\n    price {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    firstDiscount {\r\n      code\r\n      name\r\n      source\r\n      value\r\n    }\r\n    taxGroupId\r\n    taxId\r\n    equivalenceSurchargePercentage\r\n    taxPercentage\r\n    taxTreatmentId\r\n  }\r\n}",
														"variables": "{\r\n    \"id\":\"{{productId}}\",\r\n    \"productPrice\" : {\r\n        \"documentDate\" : \"2023-10-17\",\r\n        \"quantity\" : 5,\r\n        \"documentTypeId\":\"{{documentTypeId}}\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "The **ProductPrice** service is designed to provide detailed pricing and discount information for a product.  \nThis pricing and discounting information is calculated based on a variety of rules and parameters, ensuring the most accurate and tailored result for your specific needs.  \nThe service returns both the calculated discount and price for the product.\n\nExamples of usage include:\n\n1. Calling the price service for a **customer**.\n    \n2. Calling the price service for a lead where the **country is national** (equivalent to `legislationCode`).\n    \n3. Calling the price service for a lead where the **country is within the VIES** (VAT Information Exchange System) but not national.\n    \n4. Calling the price service for a lead where the **country does not fall into the aforementioned categories**."
						},
						{
							"name": "Sales Tariffs",
							"item": [
								{
									"name": "Q.SalesTariffs / add var.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is OK 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSon\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesTariffs.edges.length == 0)\r",
													"        throw new Error(\"Unable to save environment variable\");\r",
													"    pm.environment.set(\"salesTariffId\", jsd.data.salesTariffs.edges[0].node.id);\r",
													"    console.log(\"'salesTariffId' environment variable has been created : \" + pm.environment.get(\"salesTariffId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\r\n  salesTariffs \r\n   (order : { code : ASC}) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        creationDate\r\n        enabled\r\n        endDate\r\n        lines {\r\n          id\r\n          creationDate\r\n          enabled\r\n          endDate\r\n          indicatorValue\r\n          modificationDate\r\n          productId\r\n          startDate\r\n          stretchs {\r\n            id\r\n            creationDate\r\n            fromUnits\r\n            indicatorValue\r\n            modificationDate\r\n            toUnits\r\n          }\r\n        }\r\n        modificationDate\r\n        name\r\n        startDate\r\n        type\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesTariffs filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n  salesTariffs \r\n  (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        creationDate\r\n        enabled\r\n        endDate\r\n        lines {\r\n          id\r\n          creationDate\r\n          enabled\r\n          endDate\r\n          indicatorValue\r\n          modificationDate\r\n          productId\r\n          startDate\r\n          stretchs {\r\n            id\r\n            creationDate\r\n            fromUnits\r\n            indicatorValue\r\n            modificationDate\r\n            toUnits\r\n          }\r\n        }\r\n        modificationDate\r\n        name\r\n        startDate\r\n        type\r\n      }\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"id\":\"{{salesTariffId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sales Discounts",
							"item": [
								{
									"name": "Q.SalesDiscounts / add var.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesDiscounts.edges.length == 0)\r",
													"        throw new Error(\"Unable to save environment variable\");\r",
													"    pm.environment.set(\"salesDiscountId\", jsd.data.salesDiscounts.edges[0].node.id);\r",
													"    console.log(\"'salesDiscountId' environment variable has been created : \" + pm.environment.get(\"salesDiscountId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\r\n  salesDiscounts \r\n  (order : { code : ASC}) {\r\n    edges {\r\n      node {\r\n        id        \r\n        code\r\n        creationDate\r\n        enabled\r\n        endDate\r\n        lines {\r\n          id\r\n          creationDate\r\n          endDate\r\n          modificationDate\r\n          productId\r\n          startDate\r\n          firstDiscount          \r\n          stretchs {\r\n            id\r\n            creationDate\r\n            fromUnits\r\n            modificationDate\r\n            toUnits\r\n            firstDiscount\r\n          }\r\n        }\r\n        modificationDate\r\n        name\r\n        startDate\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesDiscounts filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is OK 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Response is JSon\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  ($id : UUID!) {\r\n  salesDiscounts \r\n  (where : { id : { eq : $id }})  {\r\n    edges {\r\n      node {\r\n        id        \r\n        code\r\n        creationDate\r\n        enabled\r\n        endDate\r\n        lines {\r\n          id\r\n          creationDate\r\n          endDate\r\n          modificationDate\r\n          productId\r\n          startDate\r\n          firstDiscount          \r\n          stretchs {\r\n            id\r\n            creationDate\r\n            fromUnits\r\n            modificationDate\r\n            toUnits\r\n            firstDiscount\r\n          }\r\n        }\r\n        modificationDate\r\n        name\r\n        startDate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"id\":\"{{salesDiscountId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This section outlines the foundational role of Products in the scope of sales transactions.  \nProducts serve as the foundational elements for creating and managing sales transactions. The Products entity is pivotal in creating and managing Sales Quotes, Sales Orders, Sales Delivery Notes, and Sales"
				},
				{
					"name": "🆕 Purchase invoices",
					"item": [
						{
							"name": "🆕 M.create an invoice, then update it, then delete it",
							"item": [
								{
									"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"    console.log(jsd.data.accountingExercises.edges[0].node.id);\r",
													"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"dateInFirstExercice\",jsd.data.accountingExercises.edges[0].node.startDate);\r",
													"    console.log(\"'dateInFirstExercice' environment variable has been created : \" + pm.environment.get(\"dateInFirstExercice\"));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        first:1\r\n        order:{startDate:DESC}\r\n        ) {\r\n        edges {\r\n            node {\r\n               startDate\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "2-Q.suppliers - first activated & current legislation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.suppliers.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"supplierId\", jsd.data.suppliers.edges[0].node.id);\r",
													"    console.log(\"supplierId environment variable has been created : \" + pm.environment.get(\"supplierId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($countryAcronym : String!) {\r\n    suppliers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "3-Q.taxes - get a tax for current legislation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.taxes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"taxId\", jsd.data.taxes.edges[0].node.id);\r",
													"    pm.environment.set(\"taxGroupId\", jsd.data.taxes.edges[0].node.groupId);\r",
													"});\r",
													"console.log(\"taxId environment variable has been created : \" + pm.environment.get(\"taxId\"));\r",
													"console.log(\"taxGroupId environment variable has been created : \" + pm.environment.get(\"taxGroupId\"));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let legislationCode = pm.environment.get(\"legislationCode\");\r",
													"let taxPercentage;\r",
													"if (legislationCode === 'FR') {\r",
													"     taxPercentage=5.5;\r",
													"     taxCode=\"C0007\"\r",
													"} else if (legislationCode === 'ES') {\r",
													"     taxPercentage=10;\r",
													"     taxCode=\"C0075\"\r",
													"} else if (legislationCode === 'DE') {\r",
													"     taxPercentage=7;\r",
													"     taxCode=\"C001\"\r",
													"} else {\r",
													"    console.error(\"Unexpected legislationCode value\");\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"taxPercentage\", taxPercentage);\r",
													"console.log(\"'taxPercentage' environment variable has been created : \" + pm.environment.get(\"taxPercentage\"));\r",
													"pm.environment.set(\"taxCode\", taxCode);\r",
													"console.log(\"'taxCode' environment variable has been created : \" + pm.environment.get(\"taxCode\"));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxPercentage : Decimal!) {\r\n    taxes (\r\n        where: {\r\n            percentage: {eq:$taxPercentage}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  groupId\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxPercentage\":{{taxPercentage}}\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "4-Q.tax Treatment - get a taxTreamenId for the current Taxe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.taxTreatments.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"taxTreatmentId\", jsd.data.taxTreatments.edges[0].node.id);\r",
													"});\r",
													"console.log(\"taxTreatmentId environment variable has been created : \" + pm.environment.get(\"taxTreatmentId\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxCode : String!) {\r\n    taxTreatments (\r\n        where: {\r\n            taxCode: {eq:$taxCode}\r\n            }\r\n        order:{taxCode:DESC}\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                 id\r\n                 description\r\n\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxCode\":\"{{taxCode}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "5-Q.AccountingAccount - get an account for the current taxTreamenId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"accountingAccountId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
													"});\r",
													"console.log(\"accountingAccountId environment variable has been created : \" + pm.environment.get(\"accountingAccountId\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxTreatmentId : UUID!) {\r\n    accountingAccounts (\r\n        where: {\r\n            taxTreatmentId: {eq:$taxTreatmentId}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                 id\r\n                 code\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxTreatmentId\":\"{{taxTreatmentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "6-M.PurchaseInvoice Create an invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"\r",
													"    let result = jsd.data.createPurchaseInvoice;\r",
													"    pm.environment.set(\"currentId\", result.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let taxBase = 100;\r",
													"let taxPercentage = pm.environment.get(\"taxPercentage\");\r",
													"let totalLiquid = taxBase + (taxBase * taxPercentage) / 100;\r",
													"\r",
													"pm.environment.set(\"totalLiquid\", totalLiquid);\r",
													"console.log(\"'totalLiquid' environment variable has been created: \" + pm.environment.get(\"totalLiquid\"));\r",
													"\r",
													"pm.environment.set(\"taxBase\", taxBase);\r",
													"console.log(\"'taxBase' environment variable has been created: \" + pm.environment.get(\"taxBase\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values: PurchaseInvoiceCreateGLDtoInput!) {  \r\n    createPurchaseInvoice(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"supplierId\": \"{{supplierId}}\",\r\n    \"hasCashVat\": false,\r\n    \"invoiceNumber\":\"A0001\",\r\n    \"invoiceDate\":\"{{dateInFirstExercice}}\",\r\n    \"operationDate\": \"{{dateInFirstExercice}}\",\r\n    \"totalLiquid\":{{totalLiquid}},\r\n    \"vatLines\": [\r\n        {\r\n            \"purchaseAccountingAccountId\":\"{{accountingAccountId}}\",\r\n            \"taxGroupId\":\"{{taxGroupId}}\",\r\n            \"taxId\":\"{{taxId}}\",\r\n            \"taxTreatmentId\":\"{{taxTreatmentId}}\",\r\n            \"totalVat\":{{taxPercentage}},\r\n            \"totalVatBase\":{{taxBase}}\r\n\r\n        }\r\n    ]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "7-Q.PurchaseInvoices filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    // Vérifier si la réponse contient les données nécessaires\r",
													"    if (!jsd.data || !jsd.data.salesInvoices || jsd.data.salesInvoices.edges.length === 0) {\r",
													"        console.error(\"Unable to save environment variables\");\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // Récupérer le tableau des lignes\r",
													"    let lines = jsd.data.salesInvoices.edges[0].node.lines;\r",
													"\r",
													"    // Vérifier si le tableau des lignes contient au moins deux éléments\r",
													"    if (lines.length < 2) {\r",
													"        console.error(\"Not enough lines to save environment variables\");\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // Définir les variables d'environnement pour les ID des deux premières lignes\r",
													"    pm.environment.set(\"firstLineId\", lines[0].id);\r",
													"    pm.environment.set(\"secondLineId\", lines[1].id);\r",
													"\r",
													"    // Logger les ID récupérés\r",
													"    console.log(\"'firstLineId' and 'secondLineId' environment variables have been created: \" + pm.environment.get(\"firstLineId\") + \", \" + pm.environment.get(\"secondLineId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id : UUID!) {\r\n  purchaseInvoices (\r\n    where : { id : { eq : $id }}) \r\n      {\r\n        edges {\r\n            node {\r\n                status\r\n                firstDueDate\r\n                operationDate\r\n                id\r\n                invoiceDate\r\n                invoiceNumber\r\n                creationDate\r\n                supplier{\r\n                    socialName\r\n                }\r\n                vatLines{\r\n                    purchaseAccountingAccount{\r\n                        code\r\n                    }\r\n                    tax{\r\n                        name\r\n                        percentage\r\n                    }\r\n                    taxTreatment{\r\n                        taxCode\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "8-M.PurchaseInvoices Update By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values: PurchaseInvoiceUpdateGLDtoInput!) {  \r\n    updatePurchaseInvoice(input: $values) {\r\n      id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\",\r\n    \"invoiceNumber\": \"A0002\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "9-M.PurchaseInvoice Delete By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values:PurchaseInvoiceDeleteGLDtoInput!) {  \r\n    deletePurchaseInvoice(input: $values) {\r\n      id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "For these examples, you will need:\n\n1. At least one customer\n2. At least two products\n    \n\nFor the example of modifying the invoice, we start from the created invoice.\n\n- We modify the quantity of the first line,\n- delete the second line,\n- and add a new line with the same product as the first line."
						},
						{
							"name": "🆕 M.validate and pay an Invoice (Post Invoice & Open Items Settlement)",
							"item": [
								{
									"name": "1- Q.accountingExercises - most recently opened, startDate filled in {{dateInFirstExercice}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"    console.log(jsd.data.accountingExercises.edges[0].node.id);\r",
													"    if (jsd.data == null || jsd.data.accountingExercises.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"dateInFirstExercice\",jsd.data.accountingExercises.edges[0].node.startDate);\r",
													"    console.log(\"'dateInFirstExercice' environment variable has been created : \" + pm.environment.get(\"dateInFirstExercice\"));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    accountingExercises(\r\n        where: {status: {eq: OPEN}}\r\n        first:1\r\n        order:{startDate:DESC}\r\n        ) {\r\n        edges {\r\n            node {\r\n               startDate\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "2-Q.suppliers - first activated & current legislation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.suppliers.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"supplierId\", jsd.data.suppliers.edges[0].node.id);\r",
													"    console.log(\"supplierId environment variable has been created : \" + pm.environment.get(\"supplierId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($countryAcronym : String!) {\r\n    suppliers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "3-Q.taxes - get a tax for current legislation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.taxes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"taxId\", jsd.data.taxes.edges[0].node.id);\r",
													"    pm.environment.set(\"taxGroupId\", jsd.data.taxes.edges[0].node.groupId);\r",
													"});\r",
													"console.log(\"taxId environment variable has been created : \" + pm.environment.get(\"taxId\"));\r",
													"console.log(\"taxGroupId environment variable has been created : \" + pm.environment.get(\"taxGroupId\"));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let legislationCode = pm.environment.get(\"legislationCode\");\r",
													"let taxPercentage;\r",
													"if (legislationCode === 'FR') {\r",
													"     taxPercentage=5.5;\r",
													"     taxCode=\"C0007\"\r",
													"} else if (legislationCode === 'ES') {\r",
													"     taxPercentage=10;\r",
													"     taxCode=\"C0075\"\r",
													"} else if (legislationCode === 'DE') {\r",
													"     taxPercentage=7;\r",
													"     taxCode=\"C001\"\r",
													"} else {\r",
													"    console.error(\"Unexpected legislationCode value\");\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.environment.set(\"taxPercentage\", taxPercentage);\r",
													"console.log(\"'taxPercentage' environment variable has been created : \" + pm.environment.get(\"taxPercentage\"));\r",
													"pm.environment.set(\"taxCode\", taxCode);\r",
													"console.log(\"'taxCode' environment variable has been created : \" + pm.environment.get(\"taxCode\"));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxPercentage : Decimal!) {\r\n    taxes (\r\n        where: {\r\n            percentage: {eq:$taxPercentage}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  groupId\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxPercentage\":{{taxPercentage}}\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "4-Q.tax Treatment - get a taxTreamenId for the current Taxe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.taxTreatments.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"taxTreatmentId\", jsd.data.taxTreatments.edges[0].node.id);\r",
													"});\r",
													"console.log(\"taxTreatmentId environment variable has been created : \" + pm.environment.get(\"taxTreatmentId\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxCode : String!) {\r\n    taxTreatments (\r\n        where: {\r\n            taxCode: {eq:$taxCode}\r\n            }\r\n        order:{taxCode:DESC}\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                 id\r\n                 description\r\n\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxCode\":\"{{taxCode}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "5-Q.AccountingAccount - get an account for the current taxTreamenId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.accountingAccounts.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
													"    pm.environment.set(\"accountingAccountId\", jsd.data.accountingAccounts.edges[0].node.id);\r",
													"});\r",
													"console.log(\"accountingAccountId environment variable has been created : \" + pm.environment.get(\"accountingAccountId\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($taxTreatmentId : UUID!) {\r\n    accountingAccounts (\r\n        where: {\r\n            taxTreatmentId: {eq:$taxTreatmentId}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                 id\r\n                 code\r\n                  \r\n            }\r\n        }\r\n    }   \r\n}",
												"variables": "{\r\n  \"taxTreatmentId\":\"{{taxTreatmentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "6-🆕 M.PurchaseInvoice Create an invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variable creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"\r",
													"    let result = jsd.data.createPurchaseInvoice;\r",
													"    pm.environment.set(\"currentId\", result.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let taxBase = 100;\r",
													"let taxPercentage = pm.environment.get(\"taxPercentage\");\r",
													"let totalLiquid = taxBase + (taxBase * taxPercentage) / 100;\r",
													"\r",
													"pm.environment.set(\"totalLiquid\", totalLiquid);\r",
													"console.log(\"'totalLiquid' environment variable has been created: \" + pm.environment.get(\"totalLiquid\"));\r",
													"\r",
													"pm.environment.set(\"taxBase\", taxBase);\r",
													"console.log(\"'taxBase' environment variable has been created: \" + pm.environment.get(\"taxBase\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ($values: PurchaseInvoiceCreateGLDtoInput!) {  \r\n    createPurchaseInvoice(input: $values) {\r\n    id\r\n  }\r\n}",
												"variables": "{\r\n  \"values\": {\r\n    \"supplierId\": \"{{supplierId}}\",\r\n    \"hasCashVat\": false,\r\n    \"invoiceNumber\":\"A0001\",\r\n    \"invoiceDate\":\"{{dateInFirstExercice}}\",\r\n    \"operationDate\": \"{{dateInFirstExercice}}\",\r\n    \"totalLiquid\":{{totalLiquid}},\r\n    \"vatLines\": [\r\n        {\r\n            \"purchaseAccountingAccountId\":\"{{accountingAccountId}}\",\r\n            \"taxGroupId\":\"{{taxGroupId}}\",\r\n            \"taxId\":\"{{taxId}}\",\r\n            \"taxTreatmentId\":\"{{taxTreatmentId}}\",\r\n            \"totalVat\":{{taxPercentage}},\r\n            \"totalVatBase\":{{taxBase}}\r\n\r\n        }\r\n    ]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "7- Q.journalTypes - first type PURCHASE_INVOICE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.journalTypes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"journalPurchaseId\", jsd.data.journalTypes.edges[0].node.id);\r",
													"     console.log(\"'journalPurchaseId' environment variable has been created : \" + pm.environment.get(\"journalPurchaseId\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n     journalTypes(\r\n         where: {type: {eq: PURCHASE_INVOICE}}\r\n         first:1) {\r\n        edges {\r\n            node {\r\n               id\r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "8-🆕 ⚙️ M.Post the Invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation($input: PostPurchaseInvoiceGLDtoInput!) {\r\n  postPurchaseInvoice(input: $input) {\r\n    accountingEntryId\r\n    accountingEntryNumber\r\n  }\r\n}",
												"variables": "{\r\n  \"input\": {\r\n    \"purchaseInvoiceId\": \"{{currentId}}\",\r\n    \"accountingEntryDescription\": \"Purchase Invoice validation\",\r\n    \"journalTypeId\": \"{{journalPurchaseId}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "9-🆕 Q.PurchaseInvoiceOpenItems - Retrieve the IDs of the invoice due dates.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.purchaseInvoiceOpenItems.edges.length == 0) {\r",
													"        console.error(\"Unable to save environment variable\");\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // Get the first node's data\r",
													"    let firstNode = jsd.data.purchaseInvoiceOpenItems.edges[0].node;\r",
													"\r",
													"    // Retrieve the openItemId, documentNumber, and thirdPartyId\r",
													"    let openItemId = firstNode.id;\r",
													"    let documentNumber = firstNode.purchaseInvoice.invoiceNumber;\r",
													"    let thirdPartyId = firstNode.purchaseInvoice.supplier.id;\r",
													"    let firstDueDate= firstNode.purchaseInvoice.firstDueDate;\r",
													"\r",
													"    // Save these values in environment variables\r",
													"    pm.environment.set(\"openItemId\", openItemId);\r",
													"    pm.environment.set(\"documentNumber\", documentNumber);\r",
													"    pm.environment.set(\"thirdPartyId\", thirdPartyId);\r",
													"    pm.environment.set(\"firstDueDate\", firstDueDate);\r",
													"\r",
													"    // Log the creation of these variables\r",
													"    console.log(\"'openItemId' environment variable has been created: \" + pm.environment.get(\"openItemId\"));\r",
													"    console.log(\"'documentNumber' environment variable has been created: \" + pm.environment.get(\"documentNumber\"));\r",
													"    console.log(\"'thirdPartyId' environment variable has been created: \" + pm.environment.get(\"thirdPartyId\"));\r",
													"    console.log(\"'firstDueDate' environment variable has been created: \" + pm.environment.get(\"firstDueDate\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query($Id: UUID!) {\r\n  purchaseInvoiceOpenItems(\r\n    order: {dueDate:ASC}\r\n    where : {purchaseInvoice:{ id : { eq : $Id }}}\r\n  ) {\r\n    edges {\r\n      node {\r\n        purchaseInvoice {\r\n          firstDueDate\r\n          invoiceDate\r\n          invoiceNumber\r\n          status\r\n          totalLiquid\r\n          supplier {\r\n            id\r\n            code\r\n            socialName\r\n          }\r\n        }\r\n        id\r\n        status\r\n        amount\r\n        dueDate\r\n        paidAmountAccumulated\r\n        paymentMean {\r\n          description\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n        hasNextPage\r\n    }\r\n  }\r\n  \r\n}\r\n",
												"variables": "{\r\n  \"Id\": \"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "10-🆕 Q.paymentMethods - first payment method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.paymentMethods.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"paymentMethodId\", jsd.data.paymentMethods.edges[0].node.id);\r",
													"    console.log(\"'paymentMethodId' environment variable has been created : \" + pm.environment.get(\"paymentMethodId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n    paymentMethods (\r\n        first:1\r\n    )    {\r\n\r\n        edges {\r\n            node {\r\n                id\r\n                creationDate\r\n                referenceName\r\n                type\r\n                journalType{\r\n                    code\r\n                }\r\n                subAccount{\r\n                    code\r\n                }\r\n                \r\n            }\r\n        }\r\n    }     \r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "11-🆕 ⚙️ M.PurchaseOpenItemSettlement  - Partially pay the first due date.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation($input: PurchaseOpenItemSettlementGLDtoInput!) {\r\n  purchaseOpenItemSettlement(input: $input) {\r\n    accountingEntryId\r\n    accountingEntryNumber\r\n  }\r\n}",
												"variables": "{\r\n  \"input\": {\r\n    \"entryDate\": \"{{firstDueDate}}\",\r\n    \"paymentMethodId\": \"{{paymentMethodId}}\",\r\n    \"description\": \"Partiel settlement\",\r\n    \"documentNumber\": \"{{documentNumber}}\",\r\n    \"thirdPartyId\": \"{{thirdPartyId}}\",\r\n    \"purchaseOpenItemLinkagePaidAmounts\": [\r\n        {\r\n            \"openItemId\": \"{{openItemId}}\",\r\n            \"paidAmount\": 50\r\n        }\r\n    ]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "The example shows how to create and close an invoice, then validate (post) it, how to retrieve the due dates, their status, and their amounts, and then partially pay the first due date.\n\nYou will need:\n\n1. At least one customer\n2. At least two products \n3. A sales invoice created for the customer  \n5. A sales journal\n6. A payment method set up for transactions\n    \n"
						},
						{
							"name": "🆕 Q.PurchaseInvoices - first id filled in {{currentId}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.purchaseInvoices.edges.length == 0)\r",
											"        {console.error(\"Unable to save environment variable\");return;}\r",
											"    pm.environment.set(\"currentId\", jsd.data.purchaseInvoices.edges[0].node.id);\r",
											"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n  purchaseInvoices (\r\n        first:100\r\n        order: { invoiceNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                status\r\n                firstDueDate\r\n                operationDate\r\n                id\r\n                invoiceDate\r\n                invoiceNumber\r\n                creationDate\r\n                supplier{\r\n                    socialName\r\n                }\r\n                vatLines{\r\n                    purchaseAccountingAccount{\r\n                        code\r\n                    }\r\n                    tax{\r\n                        name\r\n                        percentage\r\n                    }\r\n                    taxTreatment{\r\n                        taxCode\r\n                    }\r\n                }\r\n                openItems{\r\n                    status\r\n                    amount\r\n                    paidAmountAccumulated\r\n                    paymentMean{\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "🆕 Q.PurchaseInvoices filtered by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id : UUID!) {\r\n  purchaseInvoices (\r\n    where : { id : { eq : $id }}) \r\n      {\r\n        edges {\r\n            node {\r\n                firstDueDate\r\n                operationDate\r\n                id\r\n                invoiceDate\r\n                invoiceNumber\r\n                creationDate\r\n                supplier{\r\n                    socialName\r\n                }\r\n                vatLines{\r\n                    purchaseAccountingAccount{\r\n                        code\r\n                    }\r\n                    tax{\r\n                        name\r\n                        percentage\r\n                    }\r\n                    taxTreatment{\r\n                        taxCode\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "🆕 Q.PurchaseInvoiceOpenItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Variables creation\", function () {\r",
											"    let jsd = pm.response.json();\r",
											"\r",
											"    if (jsd.data == null || jsd.data.salesInvoiceOpenItems.edges.length == 0) {\r",
											"        console.error(\"Unable to save environment variable\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    // Get the first node's data\r",
											"    let firstNode = jsd.data.salesInvoiceOpenItems.edges[0].node;\r",
											"\r",
											"    // Retrieve the openItemId, documentNumber, and thirdPartyId\r",
											"    let openItemId = firstNode.id;\r",
											"    let documentNumber = firstNode.salesInvoice.operationalNumber;\r",
											"    let thirdPartyId = firstNode.salesInvoice.customer.id;\r",
											"\r",
											"    // Save these values in environment variables\r",
											"    pm.environment.set(\"openItemId\", openItemId);\r",
											"    pm.environment.set(\"documentNumber\", documentNumber);\r",
											"    pm.environment.set(\"thirdPartyId\", thirdPartyId);\r",
											"\r",
											"    // Log the creation of these variables\r",
											"    console.log(\"'openItemId' environment variable has been created: \" + pm.environment.get(\"openItemId\"));\r",
											"    console.log(\"'documentNumber' environment variable has been created: \" + pm.environment.get(\"documentNumber\"));\r",
											"    console.log(\"'thirdPartyId' environment variable has been created: \" + pm.environment.get(\"thirdPartyId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-TenantId",
										"value": "{{X-TenantId}}"
									},
									{
										"key": "X-OrganizationId",
										"value": "{{X-OrganizationId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{subscriptionKey}}"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n  purchaseInvoiceOpenItems(\r\n    order: {dueDate:ASC}\r\n  ) {\r\n    edges {\r\n      node {\r\n        purchaseInvoice {\r\n          invoiceDate\r\n          invoiceNumber\r\n          status\r\n          totalLiquid\r\n          supplier {\r\n            id\r\n            code\r\n            socialName\r\n          }\r\n        }\r\n        id\r\n        status\r\n        amount\r\n        dueDate\r\n        paidAmountAccumulated\r\n        paymentMean {\r\n          description\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n        hasNextPage\r\n    }\r\n  }\r\n  \r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseAddress}}/graphql",
									"host": [
										"{{baseAddress}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"description": "Example of invoice creation:\n\n- An invoice for an existing customer in Sage Active.\n    \n\nNote that, unlike quotes which allow for inputting leads, an invoice must **always** be associated with an **existing customer**."
				},
				{
					"name": "Sales Documents",
					"item": [
						{
							"name": "Sales Quotes",
							"item": [
								{
									"name": "M.create a quote, then update it, then delete it",
									"item": [
										{
											"name": "1-Q.customers - first activated & current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($countryAcronym : String!) {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesQuote Create a quote",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesQuote;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesQuoteCreateGLDtoInput!) {  \r\n    createSalesQuote(input: $values) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4-Q.SalesQuotes filtered by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    // Vérifier si la réponse contient les données nécessaires\r",
															"    if (!jsd.data || !jsd.data.salesQuotes || jsd.data.salesQuotes.edges.length === 0) {\r",
															"        console.error(\"Unable to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Récupérer le tableau des lignes\r",
															"    let lines = jsd.data.salesQuotes.edges[0].node.lines;\r",
															"\r",
															"    // Vérifier si le tableau des lignes contient au moins deux éléments\r",
															"    if (lines.length < 2) {\r",
															"        console.error(\"Not enough lines to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Définir les variables d'environnement pour les ID des deux premières lignes\r",
															"    pm.environment.set(\"firstLineId\", lines[0].id);\r",
															"    pm.environment.set(\"secondLineId\", lines[1].id);\r",
															"\r",
															"    // Logger les ID récupérés\r",
															"    console.log(\"'firstLineId' and 'secondLineId' environment variables have been created: \" + pm.environment.get(\"firstLineId\") + \", \" + pm.environment.get(\"secondLineId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($id : UUID!) {\r\n  salesQuotes (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            pendingQuantity\r\n            productCode\r\n            productId\r\n            productName\r\n            status\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-M.SalesQuote Update By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesQuoteUpdateGLDtoInput!) {  \r\n    updateSalesQuote(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"id\":\"{{firstLineId}}\",\r\n        \"totalQuantity\": 49\r\n      },\r\n      {\r\n        \"id\":\"{{secondLineId}}\",\r\n        \"requestedAction\":\"DELETE\"\r\n      },\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 2,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6-M.SalesQuote Delete By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesQuoteDeleteGLDtoInput!) {  \r\n    deleteSalesQuote(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "For these examples, you will need:\n\n1. At least one customer\n    \n2. At least two products\n    \n\nFor the example of modifying the quote, we start from the created quote.\n\n- We modify the quantity of the first line,\n- delete the second line,\n- and add a new line with the same product as the first line."
								},
								{
									"name": "M.Create a quote for a lead (no customer)",
									"item": [
										{
											"name": "1-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-M.SalesQuote Create a quote (VIES country)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesQuote;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesQuoteCreateGLDtoInput!) {  \r\n    createSalesQuote(input: $values) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"socialName\": \"Wiener Handels GmbH\",\r\n    \"contactName\": \"Maximilian Bauer\",\r\n    \"contactPhone\": \"+43 1 2345678\",\r\n    \"contactEmail\": \"maximilian.bauers@wienerhandels.at\",\r\n    \"mainAddress\":[\r\n    {\r\n        \"firstLine\": \"Stephansplatz 1\",\r\n        \"secondLine\": \"Floor 3\",\r\n        \"zipCode\": \"1010\",\r\n        \"city\": \"Vienna\",\r\n        \"countryIsoCodeAlpha2\": \"AT\"\r\n        }\r\n    ],\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesQuote Create a quote not VIES country",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesQuote;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesQuoteCreateGLDtoInput!) {  \r\n    createSalesQuote(input: $values) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"socialName\": \"Tokyo Shoji KK\",\r\n    \"contactName\": \"Taro Tanaka\",\r\n    \"contactPhone\": \"+81 3-1234-5678\",\r\n    \"contactEmail\": \"taro.tanaka@tokyoshoji.jp\",\r\n    \"mainAddress\": [\r\n      {\r\n        \"firstLine\": \"2-5-1 Marunouchi\",\r\n        \"secondLine\": \"Chiyoda-ku\",\r\n        \"zipCode\": \"100-0005\",\r\n        \"city\": \"Tokyo\",\r\n        \"countryIsoCodeAlpha2\": \"JP\"\r\n      }\r\n    ],\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "For these examples, you will need:\n\n1. At least two products\n2. Specify the countryIsoCodeAlpha2 for the lead's country."
								},
								{
									"name": "🆕⚙️ Q.Document Pdf Email",
									"item": [
										{
											"name": "1 - Q.SalesQuotes first element filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesQuotes.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.salesQuotes.edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  {\r\n  salesQuotes (first:1) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "1 - Q.userProfile Get Email From",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"\r",
															"    if (jsonResponse.data == null || jsonResponse.data.userProfile == null)\r",
															"        {console.error(\"Unable to save environment variable\"); return;}\r",
															"    pm.environment.set(\"emailFrom\", jsonResponse.data.userProfile.authenticationEmail);\r",
															"    console.log(\"'emailFrom' environment variable has been created : \" + pm.environment.get(\"emailFrom\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  userProfile {\r\n    authenticationEmail\r\n  }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - ⚙️ Q.DocumentPdfEmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($input: DocumentPdfEmailGLDtoInput!) {\r\n  documentPdfEmail(input: $input) {\r\n    type\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_QUOTE\",\r\n    \"id\": \"{{currentId}}\",\r\n    \"emailFrom\": \"{{emailFrom}}\",\r\n    \"emailTo\": \"yourEmail\",\r\n    \"emailCc\": \"\",\r\n    \"sendEmailCopy\": false,\r\n    \"emailSubject\": \"PDF document attachment\",\r\n    \"emailMessage\": \"<b>Thank you</b> for your business.<br>Please find attached the document related to your recent transactions.<br>Let us know if you have any questions.<br>Kind regards\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "### DocumentPdfEmail Service\n\nThe DocumentPdfEmail service facilitates the sending of documents in PDF format via email directly through the API. This service simplifies the process of dispatching PDF documents to designated recipients, complete with options for CC and BCC.\n\n#### Important:\n\n- The sender of the email must be the current Sage Active user. Hence, in the example, the user's email is retrieved via `userProfile`.\n    \n- Replace `emailTo` and/or `emailCC` in the variables with email addresses that will allow you to receive the email, such as your personal email address."
								},
								{
									"name": "Q.SalesQuotes - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesQuotes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.salesQuotes.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  salesQuotes (\r\n        first:100\r\n        order: { operationalNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                creationDate\r\n                customerId\r\n                documentDate\r\n                status\r\n                declinedReason\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesQuotes filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id : UUID!) {\r\n  salesQuotes (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            pendingQuantity\r\n            productCode\r\n            productId\r\n            productName\r\n            status\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "⚙️ Q.DocumentPdfPreview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "    query($input: DocumentPdfPreviewGLDtoInput!) {\r\n        documentPdfPreview(input: $input) {\r\n            type\r\n            id\r\n            pdfPreview  \r\n        }\r\n    }",
												"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_QUOTE\",\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "Two examples of quote creation:\n\n- A quote for an **existing customer** in Sage Active.\n- A quote for a **lead**, meaning a customer not yet existing in Sage Active."
						},
						{
							"name": "Sales Orders",
							"item": [
								{
									"name": "M.create an order, then update it, then delete it",
									"item": [
										{
											"name": "1-Q.customers - first activated & current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($countryAcronym : String!) {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesOrder Create an order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesOrder;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesOrderCreateGLDtoInput!) {  \r\n    createSalesOrder(input: $values) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4-Q.SalesOrders filtered by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    // Vérifier si la réponse contient les données nécessaires\r",
															"    if (!jsd.data || !jsd.data.salesOrders || jsd.data.salesOrders.edges.length === 0) {\r",
															"        console.error(\"Unable to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Récupérer le tableau des lignes\r",
															"    let lines = jsd.data.salesOrders.edges[0].node.lines;\r",
															"\r",
															"    // Vérifier si le tableau des lignes contient au moins deux éléments\r",
															"    if (lines.length < 2) {\r",
															"        console.error(\"Not enough lines to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Définir les variables d'environnement pour les ID des deux premières lignes\r",
															"    pm.environment.set(\"firstLineId\", lines[0].id);\r",
															"    pm.environment.set(\"secondLineId\", lines[1].id);\r",
															"\r",
															"    // Logger les ID récupérés\r",
															"    console.log(\"'firstLineId' and 'secondLineId' environment variables have been created: \" + pm.environment.get(\"firstLineId\") + \", \" + pm.environment.get(\"secondLineId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($id : UUID!) {\r\n  salesOrders (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            pendingQuantity\r\n            productCode\r\n            productId\r\n            productName\r\n            status\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-M.SalesOrder Update By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesOrderUpdateGLDtoInput!) {  \r\n    updateSalesOrder(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"id\":\"{{firstLineId}}\",\r\n        \"totalQuantity\": 49\r\n      },\r\n      {\r\n        \"id\":\"{{secondLineId}}\",\r\n        \"requestedAction\":\"DELETE\"\r\n      },\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 2,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6-M.SalesOrder Delete By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesOrderDeleteGLDtoInput!) {  \r\n    deleteSalesOrder(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "For these examples, you will need:\n\n1. At least one customer\n2. At least two products\n    \n\nFor the example of modifying the order, we start from the created order.\n\n- We modify the quantity of the first line,\n- delete the second line,\n- and add a new line with the same product as the first line."
								},
								{
									"name": "🆕⚙️ Q.Document Pdf Email",
									"item": [
										{
											"name": "1 - Q.SalesOrders first element filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesOrders.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.salesOrders.edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  {\r\n  salesOrders (first:1) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "1 - Q.userProfile Get Email From",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"\r",
															"    if (jsonResponse.data == null || jsonResponse.data.userProfile == null)\r",
															"        {console.error(\"Unable to save environment variable\"); return;}\r",
															"    pm.environment.set(\"emailFrom\", jsonResponse.data.userProfile.authenticationEmail);\r",
															"    console.log(\"'emailFrom' environment variable has been created : \" + pm.environment.get(\"emailFrom\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  userProfile {\r\n    authenticationEmail\r\n  }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - ⚙️ Q.DocumentPdfEmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($input: DocumentPdfEmailGLDtoInput!) {\r\n  documentPdfEmail(input: $input) {\r\n    type\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_ORDER\",\r\n    \"id\": \"{{currentId}}\",\r\n    \"emailFrom\": \"{{emailFrom}}\",\r\n    \"emailTo\": \"yourEmail\",\r\n    \"emailCc\": \"\",\r\n    \"sendEmailCopy\": false,\r\n    \"emailSubject\": \"PDF document attachment\",\r\n    \"emailMessage\": \"<b>Thank you</b> for your business.<br>Please find attached the document related to your recent transactions.<br>Let us know if you have any questions.<br>Kind regards\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "### DocumentPdfEmail Service\n\nThe DocumentPdfEmail service facilitates the sending of documents in PDF format via email directly through the API. This service simplifies the process of dispatching PDF documents to designated recipients, complete with options for CC and BCC.\n\n#### Important:\n\n- The sender of the email must be the current Sage Active user. Hence, in the example, the user's email is retrieved via `userProfile`.\n    \n- Replace `emailTo` and/or `emailCC` in the variables with email addresses that will allow you to receive the email, such as your personal email address."
								},
								{
									"name": "Q.SalesOrders - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesOrders.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.salesOrders.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  salesOrders (\r\n        first:100\r\n        order: { operationalNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                creationDate\r\n                customerId\r\n                documentDate\r\n                status\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesOrders filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id : UUID!) {\r\n  salesOrders (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            pendingQuantity\r\n            productCode\r\n            productId\r\n            productName\r\n            status\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "⚙️ Q.DocumentPdfPreview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "    query($input: DocumentPdfPreviewGLDtoInput!) {\r\n        documentPdfPreview(input: $input) {\r\n            type\r\n            id\r\n            pdfPreview  \r\n        }\r\n    }",
												"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_ORDER\",\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "Example of order creation:\n\n- An order for an existing customer in Sage Active.\n    \n\nNote that, unlike quotes which allow for inputting leads, an order must **always** be associated with an **existing customer**."
						},
						{
							"name": "Sales Delivery notes",
							"item": [
								{
									"name": "M.create a delivery note, then update it, then delete it",
									"item": [
										{
											"name": "1-Q.customers - first activated & current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($countryAcronym : String!) {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesDeliveryNote Create a delivery note",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesDeliveryNote;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesDeliveryNoteCreateGLDtoInput!) {  \r\n    createSalesDeliveryNote(input: $values) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4-Q.SalesDeliveryNotes filtered by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    // Vérifier si la réponse contient les données nécessaires\r",
															"    if (!jsd.data || !jsd.data.salesDeliveryNotes || jsd.data.salesDeliveryNotes.edges.length === 0) {\r",
															"        console.error(\"Unable to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Récupérer le tableau des lignes\r",
															"    let lines = jsd.data.salesDeliveryNotes.edges[0].node.lines;\r",
															"\r",
															"    // Vérifier si le tableau des lignes contient au moins deux éléments\r",
															"    if (lines.length < 2) {\r",
															"        console.error(\"Not enough lines to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Définir les variables d'environnement pour les ID des deux premières lignes\r",
															"    pm.environment.set(\"firstLineId\", lines[0].id);\r",
															"    pm.environment.set(\"secondLineId\", lines[1].id);\r",
															"\r",
															"    // Logger les ID récupérés\r",
															"    console.log(\"'firstLineId' and 'secondLineId' environment variables have been created: \" + pm.environment.get(\"firstLineId\") + \", \" + pm.environment.get(\"secondLineId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($id : UUID!) {\r\n  salesDeliveryNotes (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            productCode\r\n            productId\r\n            productName\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-M.SalesDeliveryNote Update By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesDeliveryNoteUpdateGLDtoInput!) {  \r\n    updateSalesDeliveryNote(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\",\r\n    \"lines\": [\r\n      {\r\n        \"id\":\"{{firstLineId}}\",\r\n        \"totalQuantity\": 49\r\n      },\r\n      {\r\n        \"id\":\"{{secondLineId}}\",\r\n        \"requestedAction\":\"DELETE\"\r\n      },\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 2,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6-M.SalesDeliveryNote Delete By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesDeliveryNoteDeleteGLDtoInput!) {  \r\n    deleteSalesDeliveryNote(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "For these examples, you will need:\n\n1. At least one customer\n2. At least two products\n    \n\nFor the example of modifying the delivery note, we start from the created delivery note.\n\n- We modify the quantity of the first line,\n- delete the second line,\n- and add a new line with the same product as the first line."
								},
								{
									"name": "🆕 ⚙️ Q.Document Pdf Email",
									"item": [
										{
											"name": "1 - Q.SalesDeliveryNotes first element filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesDeliveryNotes .edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.salesDeliveryNotes .edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  {\r\n  salesDeliveryNotes  (first:1) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "1 - Q.userProfile Get Email From",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"\r",
															"    if (jsonResponse.data == null || jsonResponse.data.userProfile == null)\r",
															"        {console.error(\"Unable to save environment variable\"); return;}\r",
															"    pm.environment.set(\"emailFrom\", jsonResponse.data.userProfile.authenticationEmail);\r",
															"    console.log(\"'emailFrom' environment variable has been created : \" + pm.environment.get(\"emailFrom\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  userProfile {\r\n    authenticationEmail\r\n  }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - ⚙️ Q.DocumentPdfEmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($input: DocumentPdfEmailGLDtoInput!) {\r\n  documentPdfEmail(input: $input) {\r\n    type\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_DELIVERY_NOTE\",\r\n    \"id\": \"{{currentId}}\",\r\n    \"emailFrom\": \"{{emailFrom}}\",\r\n    \"emailTo\": \"yourEmail\",\r\n    \"emailCc\": \"\",\r\n    \"sendEmailCopy\": false,\r\n    \"emailSubject\": \"PDF document attachment\",\r\n    \"emailMessage\": \"<b>Thank you</b> for your business.<br>Please find attached the document related to your recent transactions.<br>Let us know if you have any questions.<br>Kind regards\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "### DocumentPdfEmail Service\n\nThe DocumentPdfEmail service facilitates the sending of documents in PDF format via email directly through the API. This service simplifies the process of dispatching PDF documents to designated recipients, complete with options for CC and BCC.\n\n#### Important:\n\n- The sender of the email must be the current Sage Active user. Hence, in the example, the user's email is retrieved via `userProfile`.\n    \n- Replace `emailTo` and/or `emailCC` in the variables with email addresses that will allow you to receive the email, such as your personal email address."
								},
								{
									"name": "Q.SalesDeliveryNotes - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesDeliveryNotes.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.salesDeliveryNotes.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  salesDeliveryNotes (\r\n        first:100\r\n        order: { operationalNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                creationDate\r\n                customerId\r\n                documentDate\r\n                status\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesDeliveryNotes filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id : UUID!) {\r\n  salesDeliveryNotes (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            productCode\r\n            productId\r\n            productName\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "⚙️ Q.DocumentPdfPreview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "    query($input: DocumentPdfPreviewGLDtoInput!) {\r\n        documentPdfPreview(input: $input) {\r\n            type\r\n            id\r\n            pdfPreview  \r\n        }\r\n    }",
												"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_DELIVERY_NOTE\",\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "Example of delivery note creation:\n\n- A delivery note for an existing customer in Sage Active.\n    \n\nNote that, unlike quotes which allow for inputting leads, a delivery note must **always** be associated with an **existing customer**."
						},
						{
							"name": "Sales Invoice",
							"item": [
								{
									"name": "M.create an invoice, then update it, then delete it",
									"item": [
										{
											"name": "1-Q.customers - first activated & current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($countryAcronym : String!) {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesInvoice Create an invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesInvoice;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesInvoiceCreateGLDtoInput!) {  \r\n    createSalesInvoice(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"salesOrderNumber\":\"\",\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4-Q.SalesInvoices filtered by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    // Vérifier si la réponse contient les données nécessaires\r",
															"    if (!jsd.data || !jsd.data.salesInvoices || jsd.data.salesInvoices.edges.length === 0) {\r",
															"        console.error(\"Unable to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Récupérer le tableau des lignes\r",
															"    let lines = jsd.data.salesInvoices.edges[0].node.lines;\r",
															"\r",
															"    // Vérifier si le tableau des lignes contient au moins deux éléments\r",
															"    if (lines.length < 2) {\r",
															"        console.error(\"Not enough lines to save environment variables\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Définir les variables d'environnement pour les ID des deux premières lignes\r",
															"    pm.environment.set(\"firstLineId\", lines[0].id);\r",
															"    pm.environment.set(\"secondLineId\", lines[1].id);\r",
															"\r",
															"    // Logger les ID récupérés\r",
															"    console.log(\"'firstLineId' and 'secondLineId' environment variables have been created: \" + pm.environment.get(\"firstLineId\") + \", \" + pm.environment.get(\"secondLineId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($id : UUID!) {\r\n  salesInvoices (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            productCode\r\n            productId\r\n            productName\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-M.SalesInvoices Update By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesInvoiceUpdateGLDtoInput!) {  \r\n    updateSalesInvoice(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\",\r\n    \"salesOrderNumber\":\"OR20021\",\r\n    \"lines\": [\r\n      {\r\n        \"id\":\"{{firstLineId}}\",\r\n        \"totalQuantity\": 49\r\n      },\r\n      {\r\n        \"id\":\"{{secondLineId}}\",\r\n        \"requestedAction\":\"DELETE\"\r\n      },\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 2,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6-M.SalesInvoice Delete By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesInvoiceDeleteGLDtoInput!) {  \r\n    deleteSalesInvoice(input: $values) {\r\n      id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"id\":\"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "For these examples, you will need:\n\n1. At least one customer\n2. At least two products\n    \n\nFor the example of modifying the invoice, we start from the created invoice.\n\n- We modify the quantity of the first line,\n- delete the second line,\n- and add a new line with the same product as the first line."
								},
								{
									"name": "🆕 M.validate and pay an Invoice (Post Invoice & Open Items Settlement)",
									"item": [
										{
											"name": "1-Q.customers - first activated & current legislation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.customers.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for customer\");return;}\r",
															"    pm.environment.set(\"customerId\", jsd.data.customers.edges[0].node.id);\r",
															"    console.log(\"customerId environment variable has been created : \" + pm.environment.get(\"customerId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ($countryAcronym : String!) {\r\n    customers (\r\n        order: [{ code: ASC }]\r\n        where: {\r\n            countryAcronym: {eq:$countryAcronym}\r\n            disabled: {eq: false}\r\n            }\r\n        first:1\r\n        ) {\r\n        edges {\r\n            node {\r\n                  id\r\n                  code\r\n                  socialName\r\n            }\r\n        }\r\n    }   \r\n}",
														"variables": "{\r\n  \"countryAcronym\":\"{{legislationCode}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2-Q.Products - first & second product by code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.products.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable for product\");return;}\r",
															"    pm.environment.set(\"firstProductId\", jsd.data.products.edges[0].node.id);\r",
															"    pm.environment.set(\"secondProductId\", jsd.data.products.edges[1].node.id);\r",
															"    console.log(\"firstproductId & secondProductId environment variable has been created : \" + pm.environment.get(\"firstProductId\")+\" - \"+pm.environment.get(\"secondProductId\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  products (\r\n       order: [{ code: ASC }]\r\n       first:2\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3-M.SalesInvoice Create an invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variable creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"\r",
															"    let result = jsd.data.createSalesInvoice;\r",
															"    pm.environment.set(\"currentId\", result.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($values: SalesInvoiceCreateGLDtoInput!) {  \r\n    createSalesInvoice(input: $values) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"values\": {\r\n    \"customerId\": \"{{customerId}}\",\r\n    \"salesOrderNumber\":\"\",\r\n    \"lines\": [\r\n      {\r\n        \"productId\": \"{{firstProductId}}\",\r\n        \"totalQuantity\": 50,\r\n        \"unitPrice\": 11,\r\n        \"firstDiscount\": 5\r\n      },\r\n      {\r\n        \"productId\": \"{{secondProductId}}\",\r\n        \"productName\":\"specific name\",\r\n        \"totalQuantity\": 4,\r\n        \"unitPrice\": 22,\r\n        \"firstDiscount\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-🆕 ⚙️ M.Close the invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation($input: CloseSalesInvoiceGLDtoInput!) {\r\n  closeSalesInvoice(input: $input) {\r\n    id\r\n    operationalNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"salesInvoiceId\": \"{{currentId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "4- Q.journalTypes - first type SALES_INVOICE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.journalTypes.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"journalSalesId\", jsd.data.journalTypes.edges[0].node.id);\r",
															"     console.log(\"'journalSalesId' environment variable has been created : \" + pm.environment.get(\"journalSalesId\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n     journalTypes(\r\n         where: {type: {eq: SALES_INVOICE}}\r\n         first:1) {\r\n        edges {\r\n            node {\r\n               id\r\n            }\r\n        }\r\n    }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "5-🆕 ⚙️ M.Post the Invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation($input: PostSalesInvoiceGLDtoInput!) {\r\n  postSalesInvoice(input: $input) {\r\n    accountingEntryId\r\n    accountingEntryNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"salesInvoiceId\": \"{{currentId}}\",\r\n    \"accountingEntryDescription\": \"Sales Invoice validation\",\r\n    \"journalTypeId\": \"{{journalSalesId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "6-🆕 Q.SalesInvoiceOpenItems - Retrieve the IDs of the invoice due dates.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesInvoiceOpenItems.edges.length == 0) {\r",
															"        console.error(\"Unable to save environment variable\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    // Get the first node's data\r",
															"    let firstNode = jsd.data.salesInvoiceOpenItems.edges[0].node;\r",
															"\r",
															"    // Retrieve the openItemId, documentNumber, and thirdPartyId\r",
															"    let openItemId = firstNode.id;\r",
															"    let documentNumber = firstNode.salesInvoice.operationalNumber;\r",
															"    let thirdPartyId = firstNode.salesInvoice.customer.id;\r",
															"    let firstDueDate= firstNode.salesInvoice.firstDueDate;\r",
															"\r",
															"    // Save these values in environment variables\r",
															"    pm.environment.set(\"openItemId\", openItemId);\r",
															"    pm.environment.set(\"documentNumber\", documentNumber);\r",
															"    pm.environment.set(\"thirdPartyId\", thirdPartyId);\r",
															"    pm.environment.set(\"firstDueDate\", firstDueDate);\r",
															"\r",
															"    // Log the creation of these variables\r",
															"    console.log(\"'openItemId' environment variable has been created: \" + pm.environment.get(\"openItemId\"));\r",
															"    console.log(\"'documentNumber' environment variable has been created: \" + pm.environment.get(\"documentNumber\"));\r",
															"    console.log(\"'thirdPartyId' environment variable has been created: \" + pm.environment.get(\"thirdPartyId\"));\r",
															"     console.log(\"'firstDueDate' environment variable has been created: \" + pm.environment.get(\"firstDueDate\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($Id: UUID!) {\r\n  salesInvoiceOpenItems(\r\n    order: {dueDate:ASC}\r\n    where : {salesInvoice:{ id : { eq : $Id }}}\r\n  ) {\r\n    edges {\r\n      node {\r\n        salesInvoice {\r\n          firstDueDate\r\n          documentDate\r\n          operationalNumber\r\n          status\r\n          totalLiquid\r\n          customer {\r\n            id\r\n            code\r\n            socialName\r\n          }\r\n        }\r\n        id\r\n        status\r\n        amount\r\n        dueDate\r\n        paidAmountAccumulated\r\n        paymentMean {\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"Id\": \"{{currentId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "7-🆕 Q.paymentMethods - first payment method",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.paymentMethods.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"paymentMethodId\", jsd.data.paymentMethods.edges[0].node.id);\r",
															"    console.log(\"'paymentMethodId' environment variable has been created : \" + pm.environment.get(\"paymentMethodId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n    paymentMethods (\r\n        first:1\r\n    )    {\r\n\r\n        edges {\r\n            node {\r\n                id\r\n                creationDate\r\n                referenceName\r\n                type\r\n                journalType{\r\n                    code\r\n                }\r\n                subAccount{\r\n                    code\r\n                }\r\n                \r\n            }\r\n        }\r\n    }     \r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "8-🆕 ⚙️ M.SalesOpenItemSettlement  - Partially pay the first due date.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation($input: SalesOpenItemSettlementGLDtoInput!) {\r\n  salesOpenItemSettlement(input: $input) {\r\n    accountingEntryId\r\n    accountingEntryNumber\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"entryDate\": \"{{firstDueDate}}\",\r\n    \"paymentMethodId\": \"{{paymentMethodId}}\",\r\n    \"description\": \"Partiel settlement\",\r\n    \"documentNumber\": \"{{documentNumber}}\",\r\n    \"thirdPartyId\": \"{{thirdPartyId}}\",\r\n    \"salesOpenItemLinkagePaidAmounts\": [\r\n        {\r\n            \"openItemId\": \"{{openItemId}}\",\r\n            \"paidAmount\": 111\r\n        }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "The example shows how to create and close an invoice, then validate (post) it, how to retrieve the due dates, their status, and their amounts, and then partially pay the first due date.\n\nYou will need:\n\n1. At least one customer\n2. At least two products \n3. A sales invoice created for the customer  \n5. A sales journal\n6. A payment method set up for transactions\n    \n"
								},
								{
									"name": "🆕⚙️ M.Generate a Credit Note",
									"item": [
										{
											"name": "1 - Q.SalesInvoices - not Pending and not hasCreditNote - first id filled in {{invoiceId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesInvoices.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"invoiceId\", jsd.data.salesInvoices.edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"invoiceId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  salesInvoices (\r\n        first:100\r\n        where: {\r\n          and: [\r\n            {status: {neq: \"Pending\"}},\r\n            {hasCreditNote: {eq: false}}\r\n          ]\r\n        }\r\n        order: { operationalNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                hasCreditNote\r\n                customerId\r\n                documentDate\r\n                status\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - ⚙️ M.Generate a Credit Note for this invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Credit Note ID Extraction\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.generateCreditNote == null || jsd.data.generateCreditNote.id == null) {\r",
															"        console.error(\"Unable to extract credit note ID\");\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    pm.environment.set(\"creditNoteId\", jsd.data.generateCreditNote.id);\r",
															"    console.log(\"CreditnoteId saved to environment: \" + pm.environment.get(\"creditNoteId\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation($input: GenerateCreditNoteGLDtoInput!) {\r\n  generateCreditNote(input: $input) {\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"id\": \"{{invoiceId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3 - Q.SalesInvoice - Reading the credit note with the linked invoice information.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesInvoices.edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"invoiceId\", jsd.data.salesInvoices.edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"invoiceId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query GetSalesInvoices($creditNoteId: UUID!) {\r\n  salesInvoices (\r\n        where: {id: {eq: $creditNoteId}}\r\n    ) {\r\n        edges {\r\n            node {\r\n                id\r\n                type\r\n                status\r\n                socialName\r\n                operationalNumber\r\n                customerId\r\n                documentDate\r\n                sourceSalesInvoice{\r\n                    type\r\n                    operationalNumber\r\n                    documentDate\r\n                }\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}\r\n",
														"variables": "{\r\n  \"creditNoteId\": \"{{creditNoteId}}\"\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "Example of credit note generation:\n\n- Generating a credit note from a Closed or Posted invoice that does not yet have a credit note.\n    \n\nThe example\n\n1. retrieves the most recent invoice that is not in \"**`Pending`**\" status and has `hasCreditNote=false`.\n    \n2. It then generates a credit note.\n    \n3. Finally, It allows to read the credit Note with the linked invoice information.\n    \n\n**Attention:**  \nIf the initial query returns no records, you will need to validate an invoice in Sage Active so that its status is set to Closed or Posted."
								},
								{
									"name": "⚙️ Q.Document Pdf Email",
									"item": [
										{
											"name": "1 - Q.SalesInvoices first element filled in {{currentId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsd = pm.response.json();\r",
															"\r",
															"    if (jsd.data == null || jsd.data.salesInvoices .edges.length == 0)\r",
															"        {console.error(\"Unable to save environment variable\");return;}\r",
															"    pm.environment.set(\"currentId\", jsd.data.salesInvoices .edges[0].node.id);\r",
															"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query  {\r\n  salesInvoices  (first:1) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "1 - Q.userProfile Get Email From",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Variables creation\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"\r",
															"    if (jsonResponse.data == null || jsonResponse.data.userProfile == null)\r",
															"        {console.error(\"Unable to save environment variable\"); return;}\r",
															"    pm.environment.set(\"emailFrom\", jsonResponse.data.userProfile.authenticationEmail);\r",
															"    console.log(\"'emailFrom' environment variable has been created : \" + pm.environment.get(\"emailFrom\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  userProfile {\r\n    authenticationEmail\r\n  }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 - ⚙️ Q.DocumentPdfEmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-TenantId",
														"value": "{{X-TenantId}}"
													},
													{
														"key": "X-OrganizationId",
														"value": "{{X-OrganizationId}}"
													},
													{
														"key": "x-api-key",
														"value": "{{subscriptionKey}}"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query($input: DocumentPdfEmailGLDtoInput!) {\r\n  documentPdfEmail(input: $input) {\r\n    type\r\n    id\r\n  }\r\n}",
														"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_INVOICE\",\r\n    \"id\": \"{{currentId}}\",\r\n    \"emailFrom\": \"{{emailFrom}}\",\r\n    \"emailTo\": \"yourEmail\",\r\n    \"emailCc\": \"\",\r\n    \"sendEmailCopy\": false,\r\n    \"emailSubject\": \"PDF document attachment\",\r\n    \"emailMessage\": \"<b>Thank you</b> for your business.<br>Please find attached the document related to your recent transactions.<br>Let us know if you have any questions.<br>Kind regards\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{baseAddress}}/graphql",
													"host": [
														"{{baseAddress}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"description": "### DocumentPdfEmail Service\n\nThe DocumentPdfEmail service facilitates the sending of documents in PDF format via email directly through the API. This service simplifies the process of dispatching PDF documents to designated recipients, complete with options for CC and BCC.\n\n#### Important:\n\n- The sender of the email must be the current Sage Active user. Hence, in the example, the user's email is retrieved via `userProfile`.\n    \n- Replace `emailTo` and/or `emailCC` in the variables with email addresses that will allow you to receive the email, such as your personal email address."
								},
								{
									"name": "Q.SalesInvoices - first id filled in {{currentId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesInvoices.edges.length == 0)\r",
													"        {console.error(\"Unable to save environment variable\");return;}\r",
													"    pm.environment.set(\"currentId\", jsd.data.salesInvoices.edges[0].node.id);\r",
													"    console.log(\"'currentId' environment variable has been created : \" + pm.environment.get(\"currentId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  salesInvoices (\r\n        first:100\r\n        order: { operationalNumber: DESC }\r\n    )  {\r\n        edges {\r\n            node {\r\n                firstDueDate\r\n                id\r\n                socialName\r\n                operationalNumber\r\n                salesOrderNumber\r\n                creationDate\r\n                customerId\r\n                documentDate\r\n                status\r\n                totalNet\r\n                discount\r\n                lines{\r\n                    productCode\r\n                    productId\r\n                    productName\r\n                    totalQuantity\r\n                    unitPrice\r\n                    firstDiscount\r\n                    totalNet\r\n                }\r\n                openItems{\r\n                    status\r\n                    amount\r\n                    paidAmountAccumulated\r\n                    paymentMean{\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        totalCount\r\n        pageInfo {\r\n         hasNextPage\r\n        }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesInvoices filtered by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ($id : UUID!) {\r\n  salesInvoices (where : { id : { eq : $id }}) {\r\n    edges {\r\n      node {\r\n        id\r\n        customerId\r\n        documentDate\r\n        operationalNumber\r\n        salesOrderNumber\r\n        salesDiscountGroupId\r\n        salesTariffId\r\n        socialName\r\n        status\r\n        totalGross\r\n        totalLiquid\r\n        totalNet\r\n        totalVat\r\n        deliveryAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            province\r\n            secondLine\r\n            zipCode\r\n        }\r\n        mainAddress{\r\n            city\r\n            countryId\r\n            countryName\r\n            firstLine\r\n            name\r\n            province\r\n            secondLine\r\n            zipCode           \r\n        }\r\n        lines{\r\n            id\r\n            firstDiscount\r\n            productCode\r\n            productId\r\n            productName\r\n            totalNet\r\n            totalQuantity\r\n            unitPrice\r\n            vatPercentage            \r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"id\":\"{{currentId}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Q.SalesInvoiceOpenItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Variables creation\", function () {\r",
													"    let jsd = pm.response.json();\r",
													"\r",
													"    if (jsd.data == null || jsd.data.salesInvoiceOpenItems.edges.length == 0) {\r",
													"        console.error(\"Unable to save environment variable\");\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // Get the first node's data\r",
													"    let firstNode = jsd.data.salesInvoiceOpenItems.edges[0].node;\r",
													"\r",
													"    // Retrieve the openItemId, documentNumber, and thirdPartyId\r",
													"    let openItemId = firstNode.id;\r",
													"    let documentNumber = firstNode.salesInvoice.operationalNumber;\r",
													"    let thirdPartyId = firstNode.salesInvoice.customer.id;\r",
													"\r",
													"    // Save these values in environment variables\r",
													"    pm.environment.set(\"openItemId\", openItemId);\r",
													"    pm.environment.set(\"documentNumber\", documentNumber);\r",
													"    pm.environment.set(\"thirdPartyId\", thirdPartyId);\r",
													"\r",
													"    // Log the creation of these variables\r",
													"    console.log(\"'openItemId' environment variable has been created: \" + pm.environment.get(\"openItemId\"));\r",
													"    console.log(\"'documentNumber' environment variable has been created: \" + pm.environment.get(\"documentNumber\"));\r",
													"    console.log(\"'thirdPartyId' environment variable has been created: \" + pm.environment.get(\"thirdPartyId\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  salesInvoiceOpenItems(\r\n    order: {dueDate:ASC}\r\n  ) {\r\n    edges {\r\n      node {\r\n        salesInvoice {\r\n          documentDate\r\n          operationalNumber\r\n          status\r\n          totalLiquid\r\n          customer {\r\n            id\r\n            code\r\n            socialName\r\n          }\r\n        }\r\n        id\r\n        status\r\n        amount\r\n        dueDate\r\n        paidAmountAccumulated\r\n        paymentMean {\r\n          description\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n        hasNextPage\r\n    }\r\n  }\r\n  \r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "⚙️ Q.DocumentPdfPreview",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-TenantId",
												"value": "{{X-TenantId}}"
											},
											{
												"key": "X-OrganizationId",
												"value": "{{X-OrganizationId}}"
											},
											{
												"key": "x-api-key",
												"value": "{{subscriptionKey}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "    query($input: DocumentPdfPreviewGLDtoInput!) {\r\n        documentPdfPreview(input: $input) {\r\n            type\r\n            id\r\n            pdfPreview  \r\n        }\r\n    }",
												"variables": "{\r\n  \"input\": {\r\n    \"type\": \"SALES_INVOICE\",\r\n    \"id\": \"{{currentId}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{baseAddress}}/graphql",
											"host": [
												"{{baseAddress}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"description": "Example of invoice creation:\n\n- An invoice for an existing customer in Sage Active.\n    \n\nNote that, unlike quotes which allow for inputting leads, an invoice must **always** be associated with an **existing customer**."
						}
					],
					"description": "This section outlines various types of sales documents that are essential to the sales process.\n\n  \nThese include:\n\n- Quotes,\n    \n- Orders,\n    \n- Delivery Notes,\n    \n- and Invoices.\n    \n\nEach type of document holds specific information and serves unique purposes."
				}
			],
			"description": "This section particularly addresses resources that are specific to an organization within a single tenant.\n\nWhen interacting with such resources via the Sage Active Public API V1, it’s crucial to specify the organization context by including `X-OrganizationId` in the request header."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Due to the fact that examples of queries and mutations use URLs in the format {{baseAddress}}/graphql,",
					"// it is necessary to remove the trailing '/graphql' from the {{baseAddress}} environment variable if present.",
					"",
					"let baseAddress = pm.environment.get(\"baseAddress\");",
					"",
					"if (baseAddress.endsWith(\"/graphql\")) {",
					"    baseAddress = baseAddress.replace(\"/graphql\", \"\");",
					"    pm.environment.set(\"baseAddress\", baseAddress);",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}